{
  "api/DrawBug.DrawMethod.html": {
    "href": "api/DrawBug.DrawMethod.html",
    "title": "Enum DrawMethod | DrawBug",
    "keywords": "Enum DrawMethod Namespace DrawBug Assembly DrawBug.dll [Flags] [Serializable] public enum DrawMethod Fields Solid = 2 Wire = 1"
  },
  "api/DrawBug.DrawPolygon.html": {
    "href": "api/DrawBug.DrawPolygon.html",
    "title": "Class DrawPolygon | DrawBug",
    "keywords": "Class DrawPolygon Namespace DrawBug Assembly DrawBug.dll [DefaultExecutionOrder(500)] public class DrawPolygon : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour DrawPolygon Properties BufferSize The total buffer size available for each drawing Default is 4096. public int BufferSize { get; set; } Property Value int Enabled Toggles wether the polygons could be drawn or not. public bool Enabled { get; set; } Property Value bool Material The material being used to render the normal lines. public Material Material { get; set; } Property Value Material MaxBufferSize The maximum buffer size available to render all polygons public int MaxBufferSize { get; set; } Property Value int NoZTestMaterial The material being used to render the lines through objects. public Material NoZTestMaterial { get; set; } Property Value Material Methods Arrow(Vector3, Quaternion, Vector2, Vector2, float, Color?, float, bool) Draws an arrow with depth public void Arrow(Vector3 position, Quaternion rotation, Vector2 stemSize, Vector2 tipSize, float height = 0, Color? color = null, float duration = 0, bool overrideMode = false) Parameters position Vector3 The position of the drawing rotation Quaternion The rotation of the drawing stemSize Vector2 Stem Size tipSize Vector2 Tip Size height float The height of the drawing color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects Bounds(Bounds, Color?, float, bool) Draws a representation of a bounding box. public void Bounds(Bounds bounds, Color? color = null, float duration = 0, bool overrideMode = false) Parameters bounds Bounds Bounds color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects Capsule(Vector3, Quaternion, float, float, int, int, Color?, float, bool) Draw a capsule public void Capsule(Vector3 position, Quaternion rotation, float radius, float height, int latitude = 16, int longitude = 16, Color? color = null, float duration = 0, bool overrideMode = false) Parameters position Vector3 The position of the drawing rotation Quaternion The rotation of the drawing radius float The radius of the drawing height float The height of the drawing latitude int Number of vertical points longitude int Number of vertical points color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects Capsule2D(Vector3, Quaternion, Vector2, int, CapsuleDirection2D, Color?, float, bool) Draw a 2D capsule public void Capsule2D(Vector3 position, Quaternion rotation, Vector2 size, int segments = 16, CapsuleDirection2D direction = CapsuleDirection2D.Vertical, Color? color = null, float duration = 0, bool overrideMode = false) Parameters position Vector3 The position of the drawing rotation Quaternion The rotation of the drawing size Vector2 The size of the drawing segments int The number of segments in the drawing direction CapsuleDirection2D The direction of the capsule color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects Circle(Vector3, float, Quaternion, int, Color?, float, bool) Draw a circle public void Circle(Vector3 position, float radius, Quaternion rotation, int segments = 16, Color? color = null, float duration = 0, bool overrideMode = false) Parameters position Vector3 The position of the drawing radius float The radius of the drawing rotation Quaternion The rotation of the drawing segments int The number of segments in the drawing color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects Cone(Vector3, Vector3, float, int, Color?, float, bool) Draw a cone public void Cone(Vector3 start, Vector3 end, float radius, int segments = 16, Color? color = null, float duration = 0, bool overrideMode = false) Parameters start Vector3 Cone Tip end Vector3 Cone base radius float The radius of the drawing segments int The number of segments in the drawing color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects Cube(Vector3, Quaternion, Vector3, Color?, float, bool) Draw a cube public void Cube(Vector3 position, Quaternion rotation, Vector3 size, Color? color = null, float duration = 0, bool overrideMode = false) Parameters position Vector3 The position of the drawing rotation Quaternion The rotation of the drawing size Vector3 The size of the drawing color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects Cylinder(Vector3, Quaternion, float, float, int, Color?, float, bool) Draw a cylinder public void Cylinder(Vector3 position, Quaternion rotation, float radius, float height, int segments, Color? color = null, float duration = 0, bool overrideMode = false) Parameters position Vector3 The position of the drawing rotation Quaternion The rotation of the drawing radius float The radius of the drawing height float The height of the drawing segments int The number of segments in the drawing color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects DrawMesh(Vector3[], int[], Vector3, Quaternion, Vector3, Color?, float, bool) Draw a mesh public void DrawMesh(Vector3[] vertices, int[] triangles, Vector3 position, Quaternion rotation, Vector3 size, Color? color = null, float duration = 0, bool overrideMode = false) Parameters vertices Vector3[] triangles int[] position Vector3 The position of the drawing rotation Quaternion The rotation of the drawing size Vector3 The size of the drawing color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects Draw<T>(Color?, float, bool, params object[]) Draws a class that inherits from PolygonDrawer public void Draw<T>(Color? color, float duration = 0, bool overrideMode = false, params object[] args) where T : PolygonDrawer Parameters color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects args object[] Arguments to be passed to draw Type Parameters T Class to be called to draw HollowCircle(Vector3, float, float, Quaternion, int, Color?, float, bool) Draw a hollow circle public void HollowCircle(Vector3 position, float innerRadius, float outerRadius, Quaternion rotation, int segments = 16, Color? color = null, float duration = 0, bool overrideMode = false) Parameters position Vector3 The position of the drawing innerRadius float Internal radius outerRadius float External radius rotation Quaternion The rotation of the drawing segments int The number of segments in the drawing color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects Polygons(Vector3[], int[], Color?, float, bool) Draw Polygons public void Polygons(Vector3[] vertices, int[] triangles, Color? color = null, float duration = 0, bool overrideMode = false) Parameters vertices Vector3[] triangles int[] color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects Sphere(Vector3, float, int, int, Color?, float, bool) Draw a sphere public void Sphere(Vector3 position, float radius, int latitude, int longitude, Color? color = null, float duration = 0, bool overrideMode = false) Parameters position Vector3 The position of the drawing radius float The radius of the drawing latitude int Number of vertical points longitude int Number of vertical points color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects Square(Vector3, Quaternion, Vector2, Color?, float, bool) Draw a square public void Square(Vector3 position, Quaternion rotation, Vector2 size, Color? color = null, float duration = 0, bool overrideMode = false) Parameters position Vector3 The position of the drawing rotation Quaternion The rotation of the drawing size Vector2 The size of the drawing color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects Square(Vector3, Vector3, Color?, float, bool) Draw a square past the shuddering public void Square(Vector3 pointA, Vector3 pointB, Color? color = null, float duration = 0, bool overrideMode = false) Parameters pointA Vector3 Point A pointB Vector3 Point B color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects"
  },
  "api/DrawBug.DrawText.html": {
    "href": "api/DrawBug.DrawText.html",
    "title": "Class DrawText | DrawBug",
    "keywords": "Class DrawText Namespace DrawBug Assembly DrawBug.dll public class DrawText : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour DrawText Properties Enabled Toggles wether the texts could be drawn or not. public bool Enabled { get; set; } Property Value bool Methods Draw(string, int, Matrix4x4, TMP_FontAsset, TextPivot, Color?, bool, float, bool) public void Draw(string text, int fontSize, Matrix4x4 matrix4X4, TMP_FontAsset fontAsset, TextPivot pivot, Color? color, bool staticRotation = false, float duration = 0, bool staticScale = false) Parameters text string fontSize int matrix4X4 Matrix4x4 fontAsset TMP_FontAsset pivot TextPivot color Color? staticRotation bool duration float staticScale bool Text(string, Vector3, Color?, float, int, TMP_FontAsset, TextPivot, bool) Draws text that always faces the camera public void Text(string text, Vector3 position, Color? color = null, float duration = 0, int fontSize = 5, TMP_FontAsset fontAsset = null, TextPivot pivot = TextPivot.BottomLeft, bool staticScale = false) Parameters text string Text to render position Vector3 Text position color Color? Text color duration float Text duration fontSize int Text font size fontAsset TMP_FontAsset Text font asset pivot TextPivot Text pivot staticScale bool Sets whether text is automatically scaled depending on the distance from the camera Text(string, Vector3, Quaternion, Color?, float, int, TMP_FontAsset, TextPivot) Draws text with rotation and static scale public void Text(string text, Vector3 position, Quaternion rotation, Color? color = null, float duration = 0, int fontSize = 5, TMP_FontAsset fontAsset = null, TextPivot pivot = TextPivot.BottomLeft) Parameters text string Text to render position Vector3 Text position rotation Quaternion Text rotation color Color? Text color duration float Text duration fontSize int Text font size fontAsset TMP_FontAsset Text font asset pivot TextPivot Text pivot"
  },
  "api/DrawBug.DrawWire.html": {
    "href": "api/DrawBug.DrawWire.html",
    "title": "Class DrawWire | DrawBug",
    "keywords": "Class DrawWire Namespace DrawBug Assembly DrawBug.dll [DefaultExecutionOrder(500)] public class DrawWire : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour DrawWire Properties BufferSize The total buffer size available for each drawing Default is 4096. public int BufferSize { get; set; } Property Value int Enabled Toggles wether the lines could be drawn or not. public bool Enabled { get; set; } Property Value bool Material The material being used to render the normal lines. public Material Material { get; set; } Property Value Material MaxBufferSize The maximum buffer size available to render all lines public int MaxBufferSize { get; set; } Property Value int NoZTestMaterial The material being used to render the lines through objects. public Material NoZTestMaterial { get; set; } Property Value Material Methods Arrow(Vector3, Quaternion, Vector2, Vector2, float, Color?, float, bool) Draws an arrow with depth public void Arrow(Vector3 position, Quaternion rotation, Vector2 stemSize, Vector2 tipSize, float height = 0, Color? color = null, float duration = 0, bool overrideMode = false) Parameters position Vector3 The position of the drawing rotation Quaternion The rotation of the drawing stemSize Vector2 Stem Size tipSize Vector2 Tip Size height float The height of the drawing color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects Bounds(Bounds, Color?, float, bool) Draws a representation of a bounding box. public void Bounds(Bounds bounds, Color? color = null, float duration = 0, bool overrideMode = false) Parameters bounds Bounds Bounds color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects Capsule(Vector3, Quaternion, float, float, int, Color?, float, bool) Draw a capsule public void Capsule(Vector3 position, Quaternion rotation, float radius, float height, int segments = 16, Color? color = null, float duration = 0, bool overrideMode = false) Parameters position Vector3 The position of the drawing rotation Quaternion The rotation of the drawing radius float The radius of the drawing height float The height of the drawing segments int The number of segments in the drawing color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects Capsule2D(Vector3, Quaternion, Vector2, int, CapsuleDirection2D, Color?, float, bool) Draw a 2D capsule public void Capsule2D(Vector3 position, Quaternion rotation, Vector2 size, int segments = 16, CapsuleDirection2D direction = CapsuleDirection2D.Vertical, Color? color = null, float duration = 0, bool overrideMode = false) Parameters position Vector3 The position of the drawing rotation Quaternion The rotation of the drawing size Vector2 The size of the drawing segments int The number of segments in the drawing direction CapsuleDirection2D The direction of the capsule color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects Circle(Vector3, float, Quaternion, int, Color?, float, bool) Draw a circle public void Circle(Vector3 position, float radius, Quaternion rotation, int segments = 16, Color? color = null, float duration = 0, bool overrideMode = false) Parameters position Vector3 The position of the drawing radius float The radius of the drawing rotation Quaternion The rotation of the drawing segments int The number of segments in the drawing color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects Cone(Vector3, Vector3, float, int, Color?, float, bool) Draw a cone public void Cone(Vector3 start, Vector3 end, float radius, int segments = 16, Color? color = null, float duration = 0, bool overrideMode = false) Parameters start Vector3 Cone Tip end Vector3 Cone base radius float The radius of the drawing segments int The number of segments in the drawing color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects Cube(Vector3, Quaternion, Vector3, Color?, float, bool) Draw a cube public void Cube(Vector3 position, Quaternion rotation, Vector3 size, Color? color = null, float duration = 0, bool overrideMode = false) Parameters position Vector3 The position of the drawing rotation Quaternion The rotation of the drawing size Vector3 The size of the drawing color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects Cylinder(Vector3, Quaternion, float, float, int, Color?, float, bool) Draw a cylinder public void Cylinder(Vector3 position, Quaternion rotation, float radius, float height, int segments, Color? color = null, float duration = 0, bool overrideMode = false) Parameters position Vector3 The position of the drawing rotation Quaternion The rotation of the drawing radius float The radius of the drawing height float The height of the drawing segments int The number of segments in the drawing color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects DashedLine(Vector3, Vector3, float, bool, Color?, float, bool) Draw a dashed line public void DashedLine(Vector3 start, Vector3 end, float dashGap, bool alt, Color? color = null, float duration = 0, bool overrideMode = false) Parameters start Vector3 The end of the line end Vector3 The end of the line dashGap float The dashed size alt bool color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects DrawMesh(Vector3[], int[], Vector3, Quaternion, Vector3, Color?, float, bool) Draw a mesh public void DrawMesh(Vector3[] vertices, int[] triangles, Vector3 position, Quaternion rotation, Vector3 size, Color? color = null, float duration = 0, bool overrideMode = false) Parameters vertices Vector3[] triangles int[] position Vector3 The position of the drawing rotation Quaternion The rotation of the drawing size Vector3 The size of the drawing color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects Draw<T>(Color?, float, bool, params object[]) Draws a class that inherits from WireDrawer public void Draw<T>(Color? color, float duration = 0, bool overrideMode = false, params object[] args) where T : WireDrawer Parameters color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects args object[] Arguments to be passed to draw Type Parameters T Class to be called to draw HollowCircle(Vector3, float, float, Quaternion, int, Color?, float, bool) Draw a hollow circle public void HollowCircle(Vector3 position, float innerRadius, float outerRadius, Quaternion rotation, int segments = 16, Color? color = null, float duration = 0, bool overrideMode = false) Parameters position Vector3 The position of the drawing innerRadius float Internal radius outerRadius float External radius rotation Quaternion The rotation of the drawing segments int The number of segments in the drawing color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects Line(Vector3, Vector3, Color?, float, bool) Draw a line public void Line(Vector3 start, Vector3 end, Color? color = null, float duration = 0, bool overrideMode = false) Parameters start Vector3 The beginning of the line end Vector3 The end of the line color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects LineArrow(Vector3, Vector3, float, float, float, Color?, float, bool) Draw a 2D arrow public void LineArrow(Vector3 start, Vector3 end, float arrowLenght, float arrowAngle, float offset = 90, Color? color = null, float duration = 0, bool overrideMode = false) Parameters start Vector3 the beginning of the arrow end Vector3 the end of the arrow arrowLenght float the size of the arrow arrowAngle float The angle of the arrowhead offset float The rotation of the arrow color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects LineArrow3D(Vector3, Vector3, float, float, Color?, float, bool) Draw a 3D arrow public void LineArrow3D(Vector3 start, Vector3 end, float arrowLenght, float arrowAngle, Color? color = null, float duration = 0, bool overrideMode = false) Parameters start Vector3 The beginning of the arrow end Vector3 The end of the arrow arrowLenght float the size of the arrow arrowAngle float The angle of the arrowhead color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects LinePoints(Vector3[], Color?, float, bool) Draws multiple connected lines between the points public void LinePoints(Vector3[] points, Color? color = null, float duration = 0, bool overrideMode = false) Parameters points Vector3[] The dots to be connected color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects Lines(Vector3[], Color?, float, bool) Draws an array of lines public void Lines(Vector3[] lines, Color? color = null, float duration = 0, bool overrideMode = false) Parameters lines Vector3[] The number of items in the array must be a multiple of 2 color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects Point(Vector3, float, Color?, float, bool) Draw a cross-shaped point public void Point(Vector3 position, float size = 0.4, Color? color = null, float duration = 0, bool overrideMode = false) Parameters position Vector3 The position of the drawing size float The size of the drawing color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects Sphere(Vector3, float, int, Color?, float, bool) Draw a sphere public void Sphere(Vector3 position, float radius, int segments = 16, Color? color = null, float duration = 0, bool overrideMode = false) Parameters position Vector3 The position of the drawing radius float The radius of the drawing segments int The number of segments in the drawing color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects Square(Vector3, Quaternion, Vector2, Color?, float, bool) Draw a square public void Square(Vector3 position, Quaternion rotation, Vector2 size, Color? color = null, float duration = 0, bool overrideMode = false) Parameters position Vector3 The position of the drawing rotation Quaternion The rotation of the drawing size Vector2 The size of the drawing color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects Square(Vector3, Vector3, Color?, float, bool) Draw a square past the shuddering public void Square(Vector3 pointA, Vector3 pointB, Color? color = null, float duration = 0, bool overrideMode = false) Parameters pointA Vector3 Point A pointB Vector3 Point B color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects"
  },
  "api/DrawBug.Drawbug.html": {
    "href": "api/DrawBug.Drawbug.html",
    "title": "Class Drawbug | DrawBug",
    "keywords": "Class Drawbug Namespace DrawBug Assembly DrawBug.dll public class Drawbug : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour Drawbug Properties Enabled Toggles wether the lines, polygons and texts could be drawn or not. public bool Enabled { get; set; } Property Value bool GetDrawPolygon public static DrawWire GetDrawPolygon { get; } Property Value DrawWire GetDrawText public static DrawText GetDrawText { get; } Property Value DrawText GetDrawWire public static DrawWire GetDrawWire { get; } Property Value DrawWire Methods Arrow(Vector3, Quaternion, Vector2, Vector2, float, DrawingStyle?, float) Draws an arrow with depth public static void Arrow(Vector3 position, Quaternion rotation, Vector2 stemSize, Vector2 tipSize, float height = 0, DrawingStyle? style = null, float duration = 0) Parameters position Vector3 The position of the drawing rotation Quaternion The rotation of the drawing stemSize Vector2 Stem Size tipSize Vector2 Tip Size height float The height of the drawing style DrawingStyle? The style used to render duration float The duration of the drawing Bounds(Bounds, DrawingStyle?, float) Draws a representation of a bounding box. public static void Bounds(Bounds bounds, DrawingStyle? style = null, float duration = 0) Parameters bounds Bounds Bounds style DrawingStyle? The style used to render duration float The duration of the drawing Capsule(Vector3, Quaternion, float, float, int, int, DrawingStyle?, float) Draw a capsule public static void Capsule(Vector3 position, Quaternion rotation, float radius, float height, int latitude = 16, int longitude = 16, DrawingStyle? style = null, float duration = 0) Parameters position Vector3 The position of the drawing rotation Quaternion The rotation of the drawing radius float The radius of the drawing height float The height of the drawing latitude int Number of vertical points longitude int Number of vertical points style DrawingStyle? The style used to render duration float The duration of the drawing Capsule2D(Vector3, Quaternion, Vector2, int, CapsuleDirection2D, DrawingStyle?, float) Draw a 2D capsule public static void Capsule2D(Vector3 position, Quaternion rotation, Vector2 size, int segments = 16, CapsuleDirection2D direction = CapsuleDirection2D.Vertical, DrawingStyle? style = null, float duration = 0) Parameters position Vector3 The position of the drawing rotation Quaternion The rotation of the drawing size Vector2 The size of the drawing segments int The number of segments in the drawing direction CapsuleDirection2D The direction of the capsule style DrawingStyle? The style used to render duration float The duration of the drawing Circle(Vector3, float, Quaternion, int, DrawingStyle?, float) Draw a circle public static void Circle(Vector3 position, float radius, Quaternion rotation, int segments = 16, DrawingStyle? style = null, float duration = 0) Parameters position Vector3 The position of the drawing radius float The radius of the drawing rotation Quaternion The rotation of the drawing segments int The number of segments in the drawing style DrawingStyle? The style used to render duration float The duration of the drawing Cone(Vector3, Vector3, float, int, DrawingStyle?, float) Draw a cone public static void Cone(Vector3 start, Vector3 end, float radius, int segments = 16, DrawingStyle? style = null, float duration = 0) Parameters start Vector3 Cone Tip end Vector3 Cone base radius float The radius of the drawing segments int The number of segments in the drawing style DrawingStyle? The style used to render duration float The duration of the drawing Cube(Vector3, Quaternion, Vector3, DrawingStyle?, float) Draw a cube public static void Cube(Vector3 position, Quaternion rotation, Vector3 size, DrawingStyle? style = null, float duration = 0) Parameters position Vector3 The position of the drawing rotation Quaternion The rotation of the drawing size Vector3 The size of the drawing style DrawingStyle? The style used to render duration float The duration of the drawing Cylinder(Vector3, Quaternion, float, float, int, DrawingStyle?, float) Draw a cylinder public static void Cylinder(Vector3 position, Quaternion rotation, float radius, float height, int segments, DrawingStyle? style = null, float duration = 0) Parameters position Vector3 The position of the drawing rotation Quaternion The rotation of the drawing radius float The radius of the drawing height float The height of the drawing segments int The number of segments in the drawing style DrawingStyle? The style used to render duration float The duration of the drawing DashedLine(Vector3, Vector3, float, bool, Color?, float, bool) Draw a dashed wire line public static void DashedLine(Vector3 start, Vector3 end, float dashGap, bool alt, Color? color = null, float duration = 0, bool overrideMode = false) Parameters start Vector3 The end of the line end Vector3 The end of the line dashGap float The dashed size alt bool color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects DrawMesh(Vector3[], int[], Vector3, Quaternion, Vector3, DrawingStyle?, float) Draw a mesh public static void DrawMesh(Vector3[] vertices, int[] triangles, Vector3 position, Quaternion rotation, Vector3 size, DrawingStyle? style = null, float duration = 0) Parameters vertices Vector3[] triangles int[] position Vector3 The position of the drawing rotation Quaternion The rotation of the drawing size Vector3 The size of the drawing style DrawingStyle? The style used to render duration float The duration of the drawing HollowCircle(Vector3, float, float, Quaternion, int, DrawingStyle?, float) Draw a hollow circle public static void HollowCircle(Vector3 position, float innerRadius, float outerRadius, Quaternion rotation, int segments = 16, DrawingStyle? style = null, float duration = 0) Parameters position Vector3 The position of the drawing innerRadius float Internal radius outerRadius float External radius rotation Quaternion The rotation of the drawing segments int The number of segments in the drawing style DrawingStyle? The style used to render duration float The duration of the drawing Line(Vector3, Vector3, Color?, float, bool) Draw a wire line public static void Line(Vector3 start, Vector3 end, Color? color = null, float duration = 0, bool overrideMode = false) Parameters start Vector3 The beginning of the line end Vector3 The end of the line color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects LineArrow(Vector3, Vector3, float, float, float, Color?, float, bool) Draw a wire 2D arrow public static void LineArrow(Vector3 start, Vector3 end, float arrowLenght, float arrowAngle, float offset = 90, Color? color = null, float duration = 0, bool overrideMode = false) Parameters start Vector3 the beginning of the arrow end Vector3 the end of the arrow arrowLenght float the size of the arrow arrowAngle float The angle of the arrowhead offset float The rotation of the arrow color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects LineArrow3D(Vector3, Vector3, float, float, Color?, float, bool) Draw a wire 3D arrow public static void LineArrow3D(Vector3 start, Vector3 end, float arrowLenght, float arrowAngle, Color? color = null, float duration = 0, bool overrideMode = false) Parameters start Vector3 The beginning of the arrow end Vector3 The end of the arrow arrowLenght float the size of the arrow arrowAngle float The angle of the arrowhead color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects LinePoints(Vector3[], Color?, float, bool) Draws multiple connected wire lines between the points public static void LinePoints(Vector3[] points, Color? color = null, float duration = 0, bool overrideMode = false) Parameters points Vector3[] The dots to be connected color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects Lines(Vector3[], Color?, float, bool) Draws an array of wire lines public static void Lines(Vector3[] lines, Color? color = null, float duration = 0, bool overrideMode = false) Parameters lines Vector3[] The number of items in the array must be a multiple of 2 color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects Point(Vector3, float, Color?, float, bool) Draw a wire cross-shaped point public static void Point(Vector3 position, float size = 0.4, Color? color = null, float duration = 0, bool overrideMode = false) Parameters position Vector3 The position of the drawing size float The size of the drawing color Color? The color of the drawing duration float The duration of the drawing overrideMode bool Defines whether the drawing can traverse objects Polygons(Vector3[], int[], Color?, float, bool) public static void Polygons(Vector3[] vertices, int[] triangles, Color? color = null, float duration = 0, bool overrideMode = false) Parameters vertices Vector3[] triangles int[] color Color? duration float overrideMode bool Sphere(Vector3, float, int, int, DrawingStyle?, float) Draw a sphere public static void Sphere(Vector3 position, float radius, int latitude, int longitude, DrawingStyle? style = null, float duration = 0) Parameters position Vector3 The position of the drawing radius float The radius of the drawing latitude int Number of vertical points longitude int Number of vertical points style DrawingStyle? The style used to render duration float The duration of the drawing Square(Vector3, Quaternion, Vector2, DrawingStyle?, float) Draw a square public static void Square(Vector3 position, Quaternion rotation, Vector2 size, DrawingStyle? style = null, float duration = 0) Parameters position Vector3 The position of the drawing rotation Quaternion The rotation of the drawing size Vector2 The size of the drawing style DrawingStyle? The style used to render duration float The duration of the drawing Square(Vector3, Vector3, DrawingStyle?, float) Draw a square past the shuddering public static void Square(Vector3 pointA, Vector3 pointB, DrawingStyle? style = null, float duration = 0) Parameters pointA Vector3 Point A pointB Vector3 Point B style DrawingStyle? The style used to render duration float The duration of the drawing Text(string, Vector3, Color?, float, int, TMP_FontAsset, TextPivot, bool) Draws text that always faces the camera public static void Text(string text, Vector3 position, Color? color = null, float duration = 0, int fontSize = 5, TMP_FontAsset fontAsset = null, TextPivot pivot = TextPivot.BottomLeft, bool staticScale = false) Parameters text string Text to render position Vector3 Text position color Color? Text color duration float Text duration fontSize int Text font size fontAsset TMP_FontAsset Text font asset pivot TextPivot Text pivot staticScale bool Sets whether text is automatically scaled depending on the distance from the camera Text(string, Vector3, Quaternion, Color?, float, int, TMP_FontAsset, TextPivot) Draws text with rotation and static scale public static void Text(string text, Vector3 position, Quaternion rotation, Color? color = null, float duration = 0, int fontSize = 5, TMP_FontAsset fontAsset = null, TextPivot pivot = TextPivot.BottomLeft) Parameters text string Text to render position Vector3 Text position rotation Quaternion Text rotation color Color? Text color duration float Text duration fontSize int Text font size fontAsset TMP_FontAsset Text font asset pivot TextPivot Text pivot"
  },
  "api/DrawBug.DrawingStyle.html": {
    "href": "api/DrawBug.DrawingStyle.html",
    "title": "Struct DrawingStyle | DrawBug",
    "keywords": "Struct DrawingStyle Namespace DrawBug Assembly DrawBug.dll [Serializable] public struct DrawingStyle Fields DrawMethod public DrawMethod DrawMethod Field Value DrawMethod Override public bool Override Field Value bool SolidColor public Color SolidColor Field Value Color WireColor public Color WireColor Field Value Color Properties GetSolidColor public Color GetSolidColor { get; } Property Value Color GetWireColor public Color GetWireColor { get; } Property Value Color Operators implicit operator DrawingStyle(DrawMethod) public static implicit operator DrawingStyle(DrawMethod drawMethod) Parameters drawMethod DrawMethod Returns DrawingStyle implicit operator bool(DrawingStyle) public static implicit operator bool(DrawingStyle style) Parameters style DrawingStyle Returns bool implicit operator Color(DrawingStyle) public static implicit operator Color(DrawingStyle style) Parameters style DrawingStyle Returns Color implicit operator DrawingStyle((Color wireColor, Color solidColor)) public static implicit operator DrawingStyle((Color wireColor, Color solidColor) colors) Parameters colors (Color wireColor, Color solidColor) Returns DrawingStyle implicit operator DrawingStyle(Color) public static implicit operator DrawingStyle(Color color) Parameters color Color Returns DrawingStyle"
  },
  "api/DrawBug.LRUDictionary-2.html": {
    "href": "api/DrawBug.LRUDictionary-2.html",
    "title": "Class LRUDictionary<TK, TV> | DrawBug",
    "keywords": "Class LRUDictionary<TK, TV> Namespace DrawBug Assembly DrawBug.dll public class LRUDictionary<TK, TV> Type Parameters TK TV Inheritance object LRUDictionary<TK, TV> Constructors LRUDictionary(int) public LRUDictionary(int capacity) Parameters capacity int Fields Capacity public int Capacity Field Value int Properties Count public int Count { get; } Property Value int IsReadOnly public bool IsReadOnly { get; } Property Value bool this[TK] public TV this[TK key] { get; set; } Parameters key TK Property Value TV Keys public ICollection<TK> Keys { get; } Property Value ICollection<TK> Values public ICollection<TV> Values { get; } Property Value ICollection<TV> Methods Add(KeyValuePair<TK, TV>) public void Add(KeyValuePair<TK, TV> item) Parameters item KeyValuePair<TK, TV> Add(TK, TV) public void Add(TK key, TV value) Parameters key TK value TV Clear() public void Clear() ContainsKey(TK) public bool ContainsKey(TK key) Parameters key TK Returns bool ExceedsCapacity(int) public bool ExceedsCapacity(int size) Parameters size int Returns bool GetEnumerator() public IEnumerator<KeyValuePair<TK, TV>> GetEnumerator() Returns IEnumerator<KeyValuePair<TK, TV>> Remove(KeyValuePair<TK, TV>) public bool Remove(KeyValuePair<TK, TV> item) Parameters item KeyValuePair<TK, TV> Returns bool Remove(TK) public bool Remove(TK key) Parameters key TK Returns bool TryGetValue(TK, out TV) public bool TryGetValue(TK key, out TV value) Parameters key TK value TV Returns bool"
  },
  "api/DrawBug.PhysicsExtension.DrawPhysics.html": {
    "href": "api/DrawBug.PhysicsExtension.DrawPhysics.html",
    "title": "Class DrawPhysics | DrawBug",
    "keywords": "Class DrawPhysics Namespace DrawBug.PhysicsExtension Assembly DrawBug.dll public static class DrawPhysics Inheritance object DrawPhysics Methods BoxCast(Vector3, Vector3, Vector3, PhysicsStyle) public static bool BoxCast(Vector3 center, Vector3 halfExtents, Vector3 direction, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 direction Vector3 physicsStyle PhysicsStyle Returns bool BoxCast(Vector3, Vector3, Vector3, Quaternion, PhysicsStyle) public static bool BoxCast(Vector3 center, Vector3 halfExtents, Vector3 direction, Quaternion orientation, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 direction Vector3 orientation Quaternion physicsStyle PhysicsStyle Returns bool BoxCast(Vector3, Vector3, Vector3, Quaternion, float, PhysicsStyle) public static bool BoxCast(Vector3 center, Vector3 halfExtents, Vector3 direction, Quaternion orientation, float maxDistance, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 direction Vector3 orientation Quaternion maxDistance float physicsStyle PhysicsStyle Returns bool BoxCast(Vector3, Vector3, Vector3, Quaternion, float, int, PhysicsStyle) public static bool BoxCast(Vector3 center, Vector3 halfExtents, Vector3 direction, Quaternion orientation, float maxDistance, int layerMask, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 direction Vector3 orientation Quaternion maxDistance float layerMask int physicsStyle PhysicsStyle Returns bool BoxCast(Vector3, Vector3, Vector3, Quaternion, float, int, QueryTriggerInteraction, PhysicsStyle) public static bool BoxCast(Vector3 center, Vector3 halfExtents, Vector3 direction, Quaternion orientation, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 direction Vector3 orientation Quaternion maxDistance float layerMask int queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns bool BoxCast(Vector3, Vector3, Vector3, out RaycastHit, PhysicsStyle) public static bool BoxCast(Vector3 center, Vector3 halfExtents, Vector3 direction, out RaycastHit rayInfo, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 direction Vector3 rayInfo RaycastHit physicsStyle PhysicsStyle Returns bool BoxCast(Vector3, Vector3, Vector3, out RaycastHit, Quaternion, PhysicsStyle) public static bool BoxCast(Vector3 center, Vector3 halfExtents, Vector3 direction, out RaycastHit rayInfo, Quaternion orientation, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 direction Vector3 rayInfo RaycastHit orientation Quaternion physicsStyle PhysicsStyle Returns bool BoxCast(Vector3, Vector3, Vector3, out RaycastHit, Quaternion, float, PhysicsStyle) public static bool BoxCast(Vector3 center, Vector3 halfExtents, Vector3 direction, out RaycastHit rayInfo, Quaternion orientation, float maxDistance, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 direction Vector3 rayInfo RaycastHit orientation Quaternion maxDistance float physicsStyle PhysicsStyle Returns bool BoxCast(Vector3, Vector3, Vector3, out RaycastHit, Quaternion, float, int, PhysicsStyle) public static bool BoxCast(Vector3 center, Vector3 halfExtents, Vector3 direction, out RaycastHit rayInfo, Quaternion orientation, float maxDistance, int layerMask, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 direction Vector3 rayInfo RaycastHit orientation Quaternion maxDistance float layerMask int physicsStyle PhysicsStyle Returns bool BoxCast(Vector3, Vector3, Vector3, out RaycastHit, Quaternion, float, int, QueryTriggerInteraction, PhysicsStyle) public static bool BoxCast(Vector3 center, Vector3 halfExtents, Vector3 direction, out RaycastHit hitInfo, Quaternion orientation, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 direction Vector3 hitInfo RaycastHit orientation Quaternion maxDistance float layerMask int queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns bool BoxCastAll(Vector3, Vector3, Vector3, PhysicsStyle) public static RaycastHit[] BoxCastAll(Vector3 center, Vector3 halfExtents, Vector3 direction, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 direction Vector3 physicsStyle PhysicsStyle Returns RaycastHit[] BoxCastAll(Vector3, Vector3, Vector3, Quaternion, PhysicsStyle) public static RaycastHit[] BoxCastAll(Vector3 center, Vector3 halfExtents, Vector3 direction, Quaternion orientation, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 direction Vector3 orientation Quaternion physicsStyle PhysicsStyle Returns RaycastHit[] BoxCastAll(Vector3, Vector3, Vector3, Quaternion, float, PhysicsStyle) public static RaycastHit[] BoxCastAll(Vector3 center, Vector3 halfExtents, Vector3 direction, Quaternion orientation, float maxDistance, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 direction Vector3 orientation Quaternion maxDistance float physicsStyle PhysicsStyle Returns RaycastHit[] BoxCastAll(Vector3, Vector3, Vector3, Quaternion, float, LayerMask, PhysicsStyle) public static RaycastHit[] BoxCastAll(Vector3 center, Vector3 halfExtents, Vector3 direction, Quaternion orientation, float maxDistance, LayerMask layerMask, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 direction Vector3 orientation Quaternion maxDistance float layerMask LayerMask physicsStyle PhysicsStyle Returns RaycastHit[] BoxCastAll(Vector3, Vector3, Vector3, Quaternion, float, LayerMask, QueryTriggerInteraction, PhysicsStyle) public static RaycastHit[] BoxCastAll(Vector3 center, Vector3 halfExtents, Vector3 direction, Quaternion orientation, float maxDistance, LayerMask layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 direction Vector3 orientation Quaternion maxDistance float layerMask LayerMask queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns RaycastHit[] BoxCastNonAlloc(Vector3, Vector3, Vector3, RaycastHit[], PhysicsStyle) public static int BoxCastNonAlloc(Vector3 center, Vector3 halfExtents, Vector3 direction, RaycastHit[] results, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 direction Vector3 results RaycastHit[] physicsStyle PhysicsStyle Returns int BoxCastNonAlloc(Vector3, Vector3, Vector3, RaycastHit[], Quaternion, PhysicsStyle) public static int BoxCastNonAlloc(Vector3 center, Vector3 halfExtents, Vector3 direction, RaycastHit[] results, Quaternion orientation, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 direction Vector3 results RaycastHit[] orientation Quaternion physicsStyle PhysicsStyle Returns int BoxCastNonAlloc(Vector3, Vector3, Vector3, RaycastHit[], Quaternion, float, PhysicsStyle) public static int BoxCastNonAlloc(Vector3 center, Vector3 halfExtents, Vector3 direction, RaycastHit[] results, Quaternion orientation, float maxDistance, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 direction Vector3 results RaycastHit[] orientation Quaternion maxDistance float physicsStyle PhysicsStyle Returns int BoxCastNonAlloc(Vector3, Vector3, Vector3, RaycastHit[], Quaternion, float, int, PhysicsStyle) public static int BoxCastNonAlloc(Vector3 center, Vector3 halfExtents, Vector3 direction, RaycastHit[] results, Quaternion orientation, float maxDistance, int layerMask, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 direction Vector3 results RaycastHit[] orientation Quaternion maxDistance float layerMask int physicsStyle PhysicsStyle Returns int BoxCastNonAlloc(Vector3, Vector3, Vector3, RaycastHit[], Quaternion, float, int, QueryTriggerInteraction, PhysicsStyle) public static int BoxCastNonAlloc(Vector3 center, Vector3 halfExtents, Vector3 direction, RaycastHit[] results, Quaternion orientation, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 direction Vector3 results RaycastHit[] orientation Quaternion maxDistance float layerMask int queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns int CapsuleCast(Vector3, Vector3, float, Vector3, PhysicsStyle) public static bool CapsuleCast(Vector3 point1, Vector3 point2, float radius, Vector3 direction, PhysicsStyle physicsStyle = default) Parameters point1 Vector3 point2 Vector3 radius float direction Vector3 physicsStyle PhysicsStyle Returns bool CapsuleCast(Vector3, Vector3, float, Vector3, float, PhysicsStyle) public static bool CapsuleCast(Vector3 point1, Vector3 point2, float radius, Vector3 direction, float maxDistance, PhysicsStyle physicsStyle = default) Parameters point1 Vector3 point2 Vector3 radius float direction Vector3 maxDistance float physicsStyle PhysicsStyle Returns bool CapsuleCast(Vector3, Vector3, float, Vector3, float, int, PhysicsStyle) public static bool CapsuleCast(Vector3 point1, Vector3 point2, float radius, Vector3 direction, float maxDistance, int layerMask, PhysicsStyle physicsStyle = default) Parameters point1 Vector3 point2 Vector3 radius float direction Vector3 maxDistance float layerMask int physicsStyle PhysicsStyle Returns bool CapsuleCast(Vector3, Vector3, float, Vector3, float, int, QueryTriggerInteraction, PhysicsStyle) public static bool CapsuleCast(Vector3 point1, Vector3 point2, float radius, Vector3 direction, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters point1 Vector3 point2 Vector3 radius float direction Vector3 maxDistance float layerMask int queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns bool CapsuleCast(Vector3, Vector3, float, Vector3, out RaycastHit, PhysicsStyle) public static bool CapsuleCast(Vector3 point1, Vector3 point2, float radius, Vector3 direction, out RaycastHit hitInfo, PhysicsStyle physicsStyle = default) Parameters point1 Vector3 point2 Vector3 radius float direction Vector3 hitInfo RaycastHit physicsStyle PhysicsStyle Returns bool CapsuleCast(Vector3, Vector3, float, Vector3, out RaycastHit, float, PhysicsStyle) public static bool CapsuleCast(Vector3 point1, Vector3 point2, float radius, Vector3 direction, out RaycastHit hitInfo, float maxDistance, PhysicsStyle physicsStyle = default) Parameters point1 Vector3 point2 Vector3 radius float direction Vector3 hitInfo RaycastHit maxDistance float physicsStyle PhysicsStyle Returns bool CapsuleCast(Vector3, Vector3, float, Vector3, out RaycastHit, float, int, PhysicsStyle) public static bool CapsuleCast(Vector3 point1, Vector3 point2, float radius, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask, PhysicsStyle physicsStyle = default) Parameters point1 Vector3 point2 Vector3 radius float direction Vector3 hitInfo RaycastHit maxDistance float layerMask int physicsStyle PhysicsStyle Returns bool CapsuleCast(Vector3, Vector3, float, Vector3, out RaycastHit, float, int, QueryTriggerInteraction, PhysicsStyle) public static bool CapsuleCast(Vector3 point1, Vector3 point2, float radius, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters point1 Vector3 point2 Vector3 radius float direction Vector3 hitInfo RaycastHit maxDistance float layerMask int queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns bool CapsuleCastAll(Vector3, Vector3, float, Vector3, PhysicsStyle) public static RaycastHit[] CapsuleCastAll(Vector3 point1, Vector3 point2, float radius, Vector3 direction, PhysicsStyle physicsStyle = default) Parameters point1 Vector3 point2 Vector3 radius float direction Vector3 physicsStyle PhysicsStyle Returns RaycastHit[] CapsuleCastAll(Vector3, Vector3, float, Vector3, float, PhysicsStyle) public static RaycastHit[] CapsuleCastAll(Vector3 point1, Vector3 point2, float radius, Vector3 direction, float maxDistance, PhysicsStyle physicsStyle = default) Parameters point1 Vector3 point2 Vector3 radius float direction Vector3 maxDistance float physicsStyle PhysicsStyle Returns RaycastHit[] CapsuleCastAll(Vector3, Vector3, float, Vector3, float, int, PhysicsStyle) public static RaycastHit[] CapsuleCastAll(Vector3 point1, Vector3 point2, float radius, Vector3 direction, float maxDistance, int layerMask, PhysicsStyle physicsStyle = default) Parameters point1 Vector3 point2 Vector3 radius float direction Vector3 maxDistance float layerMask int physicsStyle PhysicsStyle Returns RaycastHit[] CapsuleCastAll(Vector3, Vector3, float, Vector3, float, int, QueryTriggerInteraction, PhysicsStyle) public static RaycastHit[] CapsuleCastAll(Vector3 point1, Vector3 point2, float radius, Vector3 direction, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters point1 Vector3 point2 Vector3 radius float direction Vector3 maxDistance float layerMask int queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns RaycastHit[] CapsuleCastNonAlloc(Vector3, Vector3, float, Vector3, RaycastHit[], PhysicsStyle) public static int CapsuleCastNonAlloc(Vector3 point1, Vector3 point2, float radius, Vector3 direction, RaycastHit[] results, PhysicsStyle physicsStyle = default) Parameters point1 Vector3 point2 Vector3 radius float direction Vector3 results RaycastHit[] physicsStyle PhysicsStyle Returns int CapsuleCastNonAlloc(Vector3, Vector3, float, Vector3, RaycastHit[], float, PhysicsStyle) public static int CapsuleCastNonAlloc(Vector3 point1, Vector3 point2, float radius, Vector3 direction, RaycastHit[] results, float maxDistance, PhysicsStyle physicsStyle = default) Parameters point1 Vector3 point2 Vector3 radius float direction Vector3 results RaycastHit[] maxDistance float physicsStyle PhysicsStyle Returns int CapsuleCastNonAlloc(Vector3, Vector3, float, Vector3, RaycastHit[], float, int, PhysicsStyle) public static int CapsuleCastNonAlloc(Vector3 point1, Vector3 point2, float radius, Vector3 direction, RaycastHit[] results, float maxDistance, int layerMask, PhysicsStyle physicsStyle = default) Parameters point1 Vector3 point2 Vector3 radius float direction Vector3 results RaycastHit[] maxDistance float layerMask int physicsStyle PhysicsStyle Returns int CapsuleCastNonAlloc(Vector3, Vector3, float, Vector3, RaycastHit[], float, int, QueryTriggerInteraction, PhysicsStyle) public static int CapsuleCastNonAlloc(Vector3 point1, Vector3 point2, float radius, Vector3 direction, RaycastHit[] results, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters point1 Vector3 point2 Vector3 radius float direction Vector3 results RaycastHit[] maxDistance float layerMask int queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns int CheckBox(Vector3, Vector3, PhysicsStyle) public static bool CheckBox(Vector3 center, Vector3 halfExtents, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 physicsStyle PhysicsStyle Returns bool CheckBox(Vector3, Vector3, Quaternion, PhysicsStyle) public static bool CheckBox(Vector3 center, Vector3 halfExtents, Quaternion orientation, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 orientation Quaternion physicsStyle PhysicsStyle Returns bool CheckBox(Vector3, Vector3, Quaternion, int, PhysicsStyle) public static bool CheckBox(Vector3 center, Vector3 halfExtents, Quaternion orientation, int layerMask, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 orientation Quaternion layerMask int physicsStyle PhysicsStyle Returns bool CheckBox(Vector3, Vector3, Quaternion, int, QueryTriggerInteraction, PhysicsStyle) public static bool CheckBox(Vector3 center, Vector3 halfExtents, Quaternion orientation, int layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 orientation Quaternion layerMask int queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns bool CheckCapsule(Vector3, Vector3, float, PhysicsStyle) public static bool CheckCapsule(Vector3 start, Vector3 end, float radius, PhysicsStyle physicsStyle = default) Parameters start Vector3 end Vector3 radius float physicsStyle PhysicsStyle Returns bool CheckCapsule(Vector3, Vector3, float, int, PhysicsStyle) public static bool CheckCapsule(Vector3 start, Vector3 end, float radius, int layerMask, PhysicsStyle physicsStyle = default) Parameters start Vector3 end Vector3 radius float layerMask int physicsStyle PhysicsStyle Returns bool CheckCapsule(Vector3, Vector3, float, int, QueryTriggerInteraction, PhysicsStyle) public static bool CheckCapsule(Vector3 start, Vector3 end, float radius, int layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters start Vector3 end Vector3 radius float layerMask int queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns bool CheckSphere(Vector3, float, PhysicsStyle) public static bool CheckSphere(Vector3 position, float radius, PhysicsStyle physicsStyle = default) Parameters position Vector3 radius float physicsStyle PhysicsStyle Returns bool CheckSphere(Vector3, float, int, PhysicsStyle) public static bool CheckSphere(Vector3 position, float radius, int layerMask, PhysicsStyle physicsStyle = default) Parameters position Vector3 radius float layerMask int physicsStyle PhysicsStyle Returns bool CheckSphere(Vector3, float, int, QueryTriggerInteraction, PhysicsStyle) public static bool CheckSphere(Vector3 position, float radius, int layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters position Vector3 radius float layerMask int queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns bool Linecast(Vector3, Vector3, PhysicsStyle) public static bool Linecast(Vector3 start, Vector3 end, PhysicsStyle physicsStyle = default) Parameters start Vector3 end Vector3 physicsStyle PhysicsStyle Returns bool Linecast(Vector3, Vector3, int, PhysicsStyle) public static bool Linecast(Vector3 start, Vector3 end, int layerMask, PhysicsStyle physicsStyle = default) Parameters start Vector3 end Vector3 layerMask int physicsStyle PhysicsStyle Returns bool Linecast(Vector3, Vector3, int, QueryTriggerInteraction, PhysicsStyle) public static bool Linecast(Vector3 start, Vector3 end, int layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters start Vector3 end Vector3 layerMask int queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns bool Linecast(Vector3, Vector3, out RaycastHit, PhysicsStyle) public static bool Linecast(Vector3 start, Vector3 end, out RaycastHit hitInfo, PhysicsStyle physicsStyle = default) Parameters start Vector3 end Vector3 hitInfo RaycastHit physicsStyle PhysicsStyle Returns bool Linecast(Vector3, Vector3, out RaycastHit, int, PhysicsStyle) public static bool Linecast(Vector3 start, Vector3 end, out RaycastHit hitInfo, int layerMask, PhysicsStyle physicsStyle = default) Parameters start Vector3 end Vector3 hitInfo RaycastHit layerMask int physicsStyle PhysicsStyle Returns bool Linecast(Vector3, Vector3, out RaycastHit, int, QueryTriggerInteraction, PhysicsStyle) public static bool Linecast(Vector3 start, Vector3 end, out RaycastHit hitInfo, int layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters start Vector3 end Vector3 hitInfo RaycastHit layerMask int queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns bool OverlapBox(Vector3, Vector3, PhysicsStyle) public static Collider[] OverlapBox(Vector3 center, Vector3 halfExtents, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 physicsStyle PhysicsStyle Returns Collider[] OverlapBox(Vector3, Vector3, Quaternion, PhysicsStyle) public static Collider[] OverlapBox(Vector3 center, Vector3 halfExtents, Quaternion orientation, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 orientation Quaternion physicsStyle PhysicsStyle Returns Collider[] OverlapBox(Vector3, Vector3, Quaternion, int, PhysicsStyle) public static Collider[] OverlapBox(Vector3 center, Vector3 halfExtents, Quaternion orientation, int layerMask, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 orientation Quaternion layerMask int physicsStyle PhysicsStyle Returns Collider[] OverlapBox(Vector3, Vector3, Quaternion, int, QueryTriggerInteraction, PhysicsStyle) public static Collider[] OverlapBox(Vector3 center, Vector3 halfExtents, Quaternion orientation, int layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 orientation Quaternion layerMask int queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns Collider[] OverlapBoxNonAlloc(Vector3, Vector3, Collider[], PhysicsStyle) public static int OverlapBoxNonAlloc(Vector3 center, Vector3 halfExtents, Collider[] results, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 results Collider[] physicsStyle PhysicsStyle Returns int OverlapBoxNonAlloc(Vector3, Vector3, Collider[], Quaternion, PhysicsStyle) public static int OverlapBoxNonAlloc(Vector3 center, Vector3 halfExtents, Collider[] results, Quaternion orientation, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 results Collider[] orientation Quaternion physicsStyle PhysicsStyle Returns int OverlapBoxNonAlloc(Vector3, Vector3, Collider[], Quaternion, int, PhysicsStyle) public static int OverlapBoxNonAlloc(Vector3 center, Vector3 halfExtents, Collider[] results, Quaternion orientation, int layerMask, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 results Collider[] orientation Quaternion layerMask int physicsStyle PhysicsStyle Returns int OverlapBoxNonAlloc(Vector3, Vector3, Collider[], Quaternion, int, QueryTriggerInteraction, PhysicsStyle) public static int OverlapBoxNonAlloc(Vector3 center, Vector3 halfExtents, Collider[] results, Quaternion orientation, int layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters center Vector3 halfExtents Vector3 results Collider[] orientation Quaternion layerMask int queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns int OverlapCapsule(Vector3, Vector3, float, PhysicsStyle) public static Collider[] OverlapCapsule(Vector3 point0, Vector3 point1, float radius, PhysicsStyle physicsStyle = default) Parameters point0 Vector3 point1 Vector3 radius float physicsStyle PhysicsStyle Returns Collider[] OverlapCapsule(Vector3, Vector3, float, int, PhysicsStyle) public static Collider[] OverlapCapsule(Vector3 point0, Vector3 point1, float radius, int layerMask, PhysicsStyle physicsStyle = default) Parameters point0 Vector3 point1 Vector3 radius float layerMask int physicsStyle PhysicsStyle Returns Collider[] OverlapCapsule(Vector3, Vector3, float, int, QueryTriggerInteraction, PhysicsStyle) public static Collider[] OverlapCapsule(Vector3 point0, Vector3 point1, float radius, int layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters point0 Vector3 point1 Vector3 radius float layerMask int queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns Collider[] OverlapCapsuleNonAlloc(Vector3, Vector3, float, Collider[], PhysicsStyle) public static int OverlapCapsuleNonAlloc(Vector3 point0, Vector3 point1, float radius, Collider[] results, PhysicsStyle physicsStyle = default) Parameters point0 Vector3 point1 Vector3 radius float results Collider[] physicsStyle PhysicsStyle Returns int OverlapCapsuleNonAlloc(Vector3, Vector3, float, Collider[], int, PhysicsStyle) public static int OverlapCapsuleNonAlloc(Vector3 point0, Vector3 point1, float radius, Collider[] results, int layerMask, PhysicsStyle physicsStyle = default) Parameters point0 Vector3 point1 Vector3 radius float results Collider[] layerMask int physicsStyle PhysicsStyle Returns int OverlapCapsuleNonAlloc(Vector3, Vector3, float, Collider[], int, QueryTriggerInteraction, PhysicsStyle) public static int OverlapCapsuleNonAlloc(Vector3 point0, Vector3 point1, float radius, Collider[] results, int layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters point0 Vector3 point1 Vector3 radius float results Collider[] layerMask int queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns int OverlapSphere(Vector3, float, PhysicsStyle) public static Collider[] OverlapSphere(Vector3 position, float radius, PhysicsStyle physicsStyle = default) Parameters position Vector3 radius float physicsStyle PhysicsStyle Returns Collider[] OverlapSphere(Vector3, float, int, PhysicsStyle) public static Collider[] OverlapSphere(Vector3 position, float radius, int layerMask, PhysicsStyle physicsStyle = default) Parameters position Vector3 radius float layerMask int physicsStyle PhysicsStyle Returns Collider[] OverlapSphere(Vector3, float, int, QueryTriggerInteraction, PhysicsStyle) public static Collider[] OverlapSphere(Vector3 position, float radius, int layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters position Vector3 radius float layerMask int queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns Collider[] OverlapSphereNonAlloc(Vector3, float, Collider[], PhysicsStyle) public static int OverlapSphereNonAlloc(Vector3 position, float radius, Collider[] results, PhysicsStyle physicsStyle = default) Parameters position Vector3 radius float results Collider[] physicsStyle PhysicsStyle Returns int OverlapSphereNonAlloc(Vector3, float, Collider[], int, PhysicsStyle) public static int OverlapSphereNonAlloc(Vector3 position, float radius, Collider[] results, int layerMask, PhysicsStyle physicsStyle = default) Parameters position Vector3 radius float results Collider[] layerMask int physicsStyle PhysicsStyle Returns int OverlapSphereNonAlloc(Vector3, float, Collider[], int, QueryTriggerInteraction, PhysicsStyle) public static int OverlapSphereNonAlloc(Vector3 position, float radius, Collider[] results, int layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters position Vector3 radius float results Collider[] layerMask int queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns int Raycast(Ray, PhysicsStyle) public static bool Raycast(Ray ray, PhysicsStyle physicsStyle = default) Parameters ray Ray physicsStyle PhysicsStyle Returns bool Raycast(Ray, float, PhysicsStyle) public static bool Raycast(Ray ray, float maxDistance, PhysicsStyle physicsStyle = default) Parameters ray Ray maxDistance float physicsStyle PhysicsStyle Returns bool Raycast(Ray, float, int, PhysicsStyle) public static bool Raycast(Ray ray, float maxDistance, int layerMask, PhysicsStyle physicsStyle = default) Parameters ray Ray maxDistance float layerMask int physicsStyle PhysicsStyle Returns bool Raycast(Ray, float, int, QueryTriggerInteraction, PhysicsStyle) public static bool Raycast(Ray ray, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters ray Ray maxDistance float layerMask int queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns bool Raycast(Ray, out RaycastHit, PhysicsStyle) public static bool Raycast(Ray ray, out RaycastHit hitInfo, PhysicsStyle physicsStyle = default) Parameters ray Ray hitInfo RaycastHit physicsStyle PhysicsStyle Returns bool Raycast(Ray, out RaycastHit, float, PhysicsStyle) public static bool Raycast(Ray ray, out RaycastHit hitInfo, float maxDistance, PhysicsStyle physicsStyle = default) Parameters ray Ray hitInfo RaycastHit maxDistance float physicsStyle PhysicsStyle Returns bool Raycast(Ray, out RaycastHit, float, int, PhysicsStyle) public static bool Raycast(Ray ray, out RaycastHit hitInfo, float maxDistance, int layerMask, PhysicsStyle physicsStyle = default) Parameters ray Ray hitInfo RaycastHit maxDistance float layerMask int physicsStyle PhysicsStyle Returns bool Raycast(Ray, out RaycastHit, float, LayerMask, QueryTriggerInteraction, PhysicsStyle) public static bool Raycast(Ray ray, out RaycastHit hitInfo, float maxDistance, LayerMask layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters ray Ray hitInfo RaycastHit maxDistance float layerMask LayerMask queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns bool Raycast(Vector3, Vector3, PhysicsStyle) public static bool Raycast(Vector3 origin, Vector3 direction, PhysicsStyle physicsStyle = default) Parameters origin Vector3 direction Vector3 physicsStyle PhysicsStyle Returns bool Raycast(Vector3, Vector3, float, PhysicsStyle) public static bool Raycast(Vector3 origin, Vector3 direction, float maxDistance, PhysicsStyle physicsStyle = default) Parameters origin Vector3 direction Vector3 maxDistance float physicsStyle PhysicsStyle Returns bool Raycast(Vector3, Vector3, float, int, PhysicsStyle) public static bool Raycast(Vector3 origin, Vector3 direction, float maxDistance, int layerMask, PhysicsStyle physicsStyle = default) Parameters origin Vector3 direction Vector3 maxDistance float layerMask int physicsStyle PhysicsStyle Returns bool Raycast(Vector3, Vector3, float, int, QueryTriggerInteraction, PhysicsStyle) public static bool Raycast(Vector3 origin, Vector3 direction, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters origin Vector3 direction Vector3 maxDistance float layerMask int queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns bool Raycast(Vector3, Vector3, out RaycastHit, PhysicsStyle) public static bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, PhysicsStyle physicsStyle = default) Parameters origin Vector3 direction Vector3 hitInfo RaycastHit physicsStyle PhysicsStyle Returns bool Raycast(Vector3, Vector3, out RaycastHit, float, PhysicsStyle) public static bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance, PhysicsStyle physicsStyle = default) Parameters origin Vector3 direction Vector3 hitInfo RaycastHit maxDistance float physicsStyle PhysicsStyle Returns bool Raycast(Vector3, Vector3, out RaycastHit, float, int, PhysicsStyle) public static bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask, PhysicsStyle physicsStyle = default) Parameters origin Vector3 direction Vector3 hitInfo RaycastHit maxDistance float layerMask int physicsStyle PhysicsStyle Returns bool Raycast(Vector3, Vector3, out RaycastHit, float, LayerMask, QueryTriggerInteraction, PhysicsStyle) public static bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance, LayerMask layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters origin Vector3 direction Vector3 hitInfo RaycastHit maxDistance float layerMask LayerMask queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns bool RaycastAll(Ray, PhysicsStyle) public static RaycastHit[] RaycastAll(Ray ray, PhysicsStyle physicsStyle = default) Parameters ray Ray physicsStyle PhysicsStyle Returns RaycastHit[] RaycastAll(Ray, float, PhysicsStyle) public static RaycastHit[] RaycastAll(Ray ray, float maxDistance, PhysicsStyle physicsStyle = default) Parameters ray Ray maxDistance float physicsStyle PhysicsStyle Returns RaycastHit[] RaycastAll(Ray, float, LayerMask, PhysicsStyle) public static RaycastHit[] RaycastAll(Ray ray, float maxDistance, LayerMask layerMask, PhysicsStyle physicsStyle = default) Parameters ray Ray maxDistance float layerMask LayerMask physicsStyle PhysicsStyle Returns RaycastHit[] RaycastAll(Ray, float, LayerMask, QueryTriggerInteraction, PhysicsStyle) public static RaycastHit[] RaycastAll(Ray ray, float maxDistance, LayerMask layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters ray Ray maxDistance float layerMask LayerMask queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns RaycastHit[] RaycastAll(Vector3, Vector3, PhysicsStyle) public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, PhysicsStyle physicsStyle = default) Parameters origin Vector3 direction Vector3 physicsStyle PhysicsStyle Returns RaycastHit[] RaycastAll(Vector3, Vector3, float, PhysicsStyle) public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, float maxDistance, PhysicsStyle physicsStyle = default) Parameters origin Vector3 direction Vector3 maxDistance float physicsStyle PhysicsStyle Returns RaycastHit[] RaycastAll(Vector3, Vector3, float, LayerMask, PhysicsStyle) public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, float maxDistance, LayerMask layerMask, PhysicsStyle physicsStyle = default) Parameters origin Vector3 direction Vector3 maxDistance float layerMask LayerMask physicsStyle PhysicsStyle Returns RaycastHit[] RaycastAll(Vector3, Vector3, float, LayerMask, QueryTriggerInteraction, PhysicsStyle) public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, float maxDistance, LayerMask layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters origin Vector3 direction Vector3 maxDistance float layerMask LayerMask queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns RaycastHit[] RaycastNonAlloc(Ray, RaycastHit[], PhysicsStyle) public static int RaycastNonAlloc(Ray ray, RaycastHit[] results, PhysicsStyle physicsStyle = default) Parameters ray Ray results RaycastHit[] physicsStyle PhysicsStyle Returns int RaycastNonAlloc(Ray, RaycastHit[], float, PhysicsStyle) public static int RaycastNonAlloc(Ray ray, RaycastHit[] results, float maxDistance, PhysicsStyle physicsStyle = default) Parameters ray Ray results RaycastHit[] maxDistance float physicsStyle PhysicsStyle Returns int RaycastNonAlloc(Ray, RaycastHit[], float, LayerMask, PhysicsStyle) public static int RaycastNonAlloc(Ray ray, RaycastHit[] results, float maxDistance, LayerMask layerMask, PhysicsStyle physicsStyle = default) Parameters ray Ray results RaycastHit[] maxDistance float layerMask LayerMask physicsStyle PhysicsStyle Returns int RaycastNonAlloc(Ray, RaycastHit[], float, LayerMask, QueryTriggerInteraction, PhysicsStyle) public static int RaycastNonAlloc(Ray ray, RaycastHit[] results, float maxDistance, LayerMask layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters ray Ray results RaycastHit[] maxDistance float layerMask LayerMask queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns int RaycastNonAlloc(Vector3, Vector3, RaycastHit[], PhysicsStyle) public static int RaycastNonAlloc(Vector3 origin, Vector3 direction, RaycastHit[] results, PhysicsStyle physicsStyle = default) Parameters origin Vector3 direction Vector3 results RaycastHit[] physicsStyle PhysicsStyle Returns int RaycastNonAlloc(Vector3, Vector3, RaycastHit[], float, PhysicsStyle) public static int RaycastNonAlloc(Vector3 origin, Vector3 direction, RaycastHit[] results, float maxDistance, PhysicsStyle physicsStyle = default) Parameters origin Vector3 direction Vector3 results RaycastHit[] maxDistance float physicsStyle PhysicsStyle Returns int RaycastNonAlloc(Vector3, Vector3, RaycastHit[], float, LayerMask, PhysicsStyle) public static int RaycastNonAlloc(Vector3 origin, Vector3 direction, RaycastHit[] results, float maxDistance, LayerMask layerMask, PhysicsStyle physicsStyle = default) Parameters origin Vector3 direction Vector3 results RaycastHit[] maxDistance float layerMask LayerMask physicsStyle PhysicsStyle Returns int RaycastNonAlloc(Vector3, Vector3, RaycastHit[], float, LayerMask, QueryTriggerInteraction, PhysicsStyle) public static int RaycastNonAlloc(Vector3 origin, Vector3 direction, RaycastHit[] results, float maxDistance, LayerMask layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters origin Vector3 direction Vector3 results RaycastHit[] maxDistance float layerMask LayerMask queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns int SphereCast(Ray, float, PhysicsStyle) public static bool SphereCast(Ray ray, float radius, PhysicsStyle physicsStyle = default) Parameters ray Ray radius float physicsStyle PhysicsStyle Returns bool SphereCast(Ray, float, float, PhysicsStyle) public static bool SphereCast(Ray ray, float radius, float maxDistance, PhysicsStyle physicsStyle = default) Parameters ray Ray radius float maxDistance float physicsStyle PhysicsStyle Returns bool SphereCast(Ray, float, float, int, PhysicsStyle) public static bool SphereCast(Ray ray, float radius, float maxDistance, int layerMask, PhysicsStyle physicsStyle = default) Parameters ray Ray radius float maxDistance float layerMask int physicsStyle PhysicsStyle Returns bool SphereCast(Ray, float, float, int, QueryTriggerInteraction, PhysicsStyle) public static bool SphereCast(Ray ray, float radius, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters ray Ray radius float maxDistance float layerMask int queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns bool SphereCast(Ray, float, out RaycastHit, PhysicsStyle) public static bool SphereCast(Ray ray, float radius, out RaycastHit hitInfo, PhysicsStyle physicsStyle = default) Parameters ray Ray radius float hitInfo RaycastHit physicsStyle PhysicsStyle Returns bool SphereCast(Ray, float, out RaycastHit, float, PhysicsStyle) public static bool SphereCast(Ray ray, float radius, out RaycastHit hitInfo, float maxDistance, PhysicsStyle physicsStyle = default) Parameters ray Ray radius float hitInfo RaycastHit maxDistance float physicsStyle PhysicsStyle Returns bool SphereCast(Ray, float, out RaycastHit, float, int, PhysicsStyle) public static bool SphereCast(Ray ray, float radius, out RaycastHit hitInfo, float maxDistance, int layerMask, PhysicsStyle physicsStyle = default) Parameters ray Ray radius float hitInfo RaycastHit maxDistance float layerMask int physicsStyle PhysicsStyle Returns bool SphereCast(Ray, float, out RaycastHit, float, int, QueryTriggerInteraction, PhysicsStyle) public static bool SphereCast(Ray ray, float radius, out RaycastHit hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters ray Ray radius float hitInfo RaycastHit maxDistance float layerMask int queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns bool SphereCast(Vector3, float, Vector3, PhysicsStyle) public static bool SphereCast(Vector3 origin, float radius, Vector3 direction, PhysicsStyle physicsStyle = default) Parameters origin Vector3 radius float direction Vector3 physicsStyle PhysicsStyle Returns bool SphereCast(Vector3, float, Vector3, float, PhysicsStyle) public static bool SphereCast(Vector3 origin, float radius, Vector3 direction, float maxDistance, PhysicsStyle physicsStyle = default) Parameters origin Vector3 radius float direction Vector3 maxDistance float physicsStyle PhysicsStyle Returns bool SphereCast(Vector3, float, Vector3, float, int, PhysicsStyle) public static bool SphereCast(Vector3 origin, float radius, Vector3 direction, float maxDistance, int layerMask, PhysicsStyle physicsStyle = default) Parameters origin Vector3 radius float direction Vector3 maxDistance float layerMask int physicsStyle PhysicsStyle Returns bool SphereCast(Vector3, float, Vector3, float, int, QueryTriggerInteraction, PhysicsStyle) public static bool SphereCast(Vector3 origin, float radius, Vector3 direction, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters origin Vector3 radius float direction Vector3 maxDistance float layerMask int queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns bool SphereCast(Vector3, float, Vector3, out RaycastHit, PhysicsStyle) public static bool SphereCast(Vector3 origin, float radius, Vector3 direction, out RaycastHit hitInfo, PhysicsStyle physicsStyle = default) Parameters origin Vector3 radius float direction Vector3 hitInfo RaycastHit physicsStyle PhysicsStyle Returns bool SphereCast(Vector3, float, Vector3, out RaycastHit, float, PhysicsStyle) public static bool SphereCast(Vector3 origin, float radius, Vector3 direction, out RaycastHit hitInfo, float maxDistance, PhysicsStyle physicsStyle = default) Parameters origin Vector3 radius float direction Vector3 hitInfo RaycastHit maxDistance float physicsStyle PhysicsStyle Returns bool SphereCast(Vector3, float, Vector3, out RaycastHit, float, int, PhysicsStyle) public static bool SphereCast(Vector3 origin, float radius, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask, PhysicsStyle physicsStyle = default) Parameters origin Vector3 radius float direction Vector3 hitInfo RaycastHit maxDistance float layerMask int physicsStyle PhysicsStyle Returns bool SphereCast(Vector3, float, Vector3, out RaycastHit, float, int, QueryTriggerInteraction, PhysicsStyle) public static bool SphereCast(Vector3 origin, float radius, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters origin Vector3 radius float direction Vector3 hitInfo RaycastHit maxDistance float layerMask int queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns bool SphereCastAll(Ray, float, PhysicsStyle) public static RaycastHit[] SphereCastAll(Ray ray, float radius, PhysicsStyle physicsStyle = default) Parameters ray Ray radius float physicsStyle PhysicsStyle Returns RaycastHit[] SphereCastAll(Ray, float, float, PhysicsStyle) public static RaycastHit[] SphereCastAll(Ray ray, float radius, float maxDistance, PhysicsStyle physicsStyle = default) Parameters ray Ray radius float maxDistance float physicsStyle PhysicsStyle Returns RaycastHit[] SphereCastAll(Ray, float, float, int, PhysicsStyle) public static RaycastHit[] SphereCastAll(Ray ray, float radius, float maxDistance, int layerMask, PhysicsStyle physicsStyle = default) Parameters ray Ray radius float maxDistance float layerMask int physicsStyle PhysicsStyle Returns RaycastHit[] SphereCastAll(Ray, float, float, int, QueryTriggerInteraction, PhysicsStyle) public static RaycastHit[] SphereCastAll(Ray ray, float radius, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters ray Ray radius float maxDistance float layerMask int queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns RaycastHit[] SphereCastAll(Vector3, float, Vector3, PhysicsStyle) public static RaycastHit[] SphereCastAll(Vector3 origin, float radius, Vector3 direction, PhysicsStyle physicsStyle = default) Parameters origin Vector3 radius float direction Vector3 physicsStyle PhysicsStyle Returns RaycastHit[] SphereCastAll(Vector3, float, Vector3, float, PhysicsStyle) public static RaycastHit[] SphereCastAll(Vector3 origin, float radius, Vector3 direction, float maxDistance, PhysicsStyle physicsStyle = default) Parameters origin Vector3 radius float direction Vector3 maxDistance float physicsStyle PhysicsStyle Returns RaycastHit[] SphereCastAll(Vector3, float, Vector3, float, int, PhysicsStyle) public static RaycastHit[] SphereCastAll(Vector3 origin, float radius, Vector3 direction, float maxDistance, int layerMask, PhysicsStyle physicsStyle = default) Parameters origin Vector3 radius float direction Vector3 maxDistance float layerMask int physicsStyle PhysicsStyle Returns RaycastHit[] SphereCastAll(Vector3, float, Vector3, float, int, QueryTriggerInteraction, PhysicsStyle) public static RaycastHit[] SphereCastAll(Vector3 origin, float radius, Vector3 direction, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters origin Vector3 radius float direction Vector3 maxDistance float layerMask int queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns RaycastHit[] SphereCastNonAlloc(Ray, float, RaycastHit[], PhysicsStyle) public static int SphereCastNonAlloc(Ray ray, float radius, RaycastHit[] results, PhysicsStyle physicsStyle = default) Parameters ray Ray radius float results RaycastHit[] physicsStyle PhysicsStyle Returns int SphereCastNonAlloc(Ray, float, RaycastHit[], float, PhysicsStyle) public static int SphereCastNonAlloc(Ray ray, float radius, RaycastHit[] results, float maxDistance, PhysicsStyle physicsStyle = default) Parameters ray Ray radius float results RaycastHit[] maxDistance float physicsStyle PhysicsStyle Returns int SphereCastNonAlloc(Ray, float, RaycastHit[], float, int, PhysicsStyle) public static int SphereCastNonAlloc(Ray ray, float radius, RaycastHit[] results, float maxDistance, int layerMask, PhysicsStyle physicsStyle = default) Parameters ray Ray radius float results RaycastHit[] maxDistance float layerMask int physicsStyle PhysicsStyle Returns int SphereCastNonAlloc(Ray, float, RaycastHit[], float, int, QueryTriggerInteraction, PhysicsStyle) public static int SphereCastNonAlloc(Ray ray, float radius, RaycastHit[] results, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters ray Ray radius float results RaycastHit[] maxDistance float layerMask int queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns int SphereCastNonAlloc(Vector3, float, Vector3, RaycastHit[], PhysicsStyle) public static int SphereCastNonAlloc(Vector3 origin, float radius, Vector3 direction, RaycastHit[] results, PhysicsStyle physicsStyle = default) Parameters origin Vector3 radius float direction Vector3 results RaycastHit[] physicsStyle PhysicsStyle Returns int SphereCastNonAlloc(Vector3, float, Vector3, RaycastHit[], float, PhysicsStyle) public static int SphereCastNonAlloc(Vector3 origin, float radius, Vector3 direction, RaycastHit[] results, float maxDistance, PhysicsStyle physicsStyle = default) Parameters origin Vector3 radius float direction Vector3 results RaycastHit[] maxDistance float physicsStyle PhysicsStyle Returns int SphereCastNonAlloc(Vector3, float, Vector3, RaycastHit[], float, int, PhysicsStyle) public static int SphereCastNonAlloc(Vector3 origin, float radius, Vector3 direction, RaycastHit[] results, float maxDistance, int layerMask, PhysicsStyle physicsStyle = default) Parameters origin Vector3 radius float direction Vector3 results RaycastHit[] maxDistance float layerMask int physicsStyle PhysicsStyle Returns int SphereCastNonAlloc(Vector3, float, Vector3, RaycastHit[], float, int, QueryTriggerInteraction, PhysicsStyle) public static int SphereCastNonAlloc(Vector3 origin, float radius, Vector3 direction, RaycastHit[] results, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction, PhysicsStyle physicsStyle = default) Parameters origin Vector3 radius float direction Vector3 results RaycastHit[] maxDistance float layerMask int queryTriggerInteraction QueryTriggerInteraction physicsStyle PhysicsStyle Returns int"
  },
  "api/DrawBug.PhysicsExtension.DrawPhysics2D.html": {
    "href": "api/DrawBug.PhysicsExtension.DrawPhysics2D.html",
    "title": "Class DrawPhysics2D | DrawBug",
    "keywords": "Class DrawPhysics2D Namespace DrawBug.PhysicsExtension Assembly DrawBug.dll public static class DrawPhysics2D Inheritance object DrawPhysics2D Methods BoxCast(Vector2, Vector2, float, Vector2, PhysicsStyle) public static RaycastHit2D BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 angle float direction Vector2 physicsStyle PhysicsStyle Returns RaycastHit2D BoxCast(Vector2, Vector2, float, Vector2, float, PhysicsStyle) public static RaycastHit2D BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 angle float direction Vector2 distance float physicsStyle PhysicsStyle Returns RaycastHit2D BoxCast(Vector2, Vector2, float, Vector2, float, LayerMask, PhysicsStyle) public static RaycastHit2D BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, LayerMask layerMask, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 angle float direction Vector2 distance float layerMask LayerMask physicsStyle PhysicsStyle Returns RaycastHit2D BoxCast(Vector2, Vector2, float, Vector2, float, LayerMask, float, PhysicsStyle) public static RaycastHit2D BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, LayerMask layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 angle float direction Vector2 distance float layerMask LayerMask minDepth float physicsStyle PhysicsStyle Returns RaycastHit2D BoxCast(Vector2, Vector2, float, Vector2, float, LayerMask, float, float, PhysicsStyle) public static RaycastHit2D BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, LayerMask layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 angle float direction Vector2 distance float layerMask LayerMask minDepth float maxDepth float physicsStyle PhysicsStyle Returns RaycastHit2D BoxCast(Vector2, Vector2, float, Vector2, ContactFilter2D, List<RaycastHit2D>, PhysicsStyle) public static int BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction, ContactFilter2D contactFilter, List<RaycastHit2D> results, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 angle float direction Vector2 contactFilter ContactFilter2D results List<RaycastHit2D> physicsStyle PhysicsStyle Returns int BoxCast(Vector2, Vector2, float, Vector2, ContactFilter2D, List<RaycastHit2D>, float, PhysicsStyle) public static int BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction, ContactFilter2D contactFilter, List<RaycastHit2D> results, float distance, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 angle float direction Vector2 contactFilter ContactFilter2D results List<RaycastHit2D> distance float physicsStyle PhysicsStyle Returns int BoxCast(Vector2, Vector2, float, Vector2, ContactFilter2D, RaycastHit2D[], PhysicsStyle) public static int BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 angle float direction Vector2 contactFilter ContactFilter2D results RaycastHit2D[] physicsStyle PhysicsStyle Returns int BoxCast(Vector2, Vector2, float, Vector2, ContactFilter2D, RaycastHit2D[], float, PhysicsStyle) public static int BoxCast(Vector2 origin, Vector2 size, float angle, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, float distance, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 angle float direction Vector2 contactFilter ContactFilter2D results RaycastHit2D[] distance float physicsStyle PhysicsStyle Returns int BoxCastAll(Vector2, Vector2, float, Vector2, PhysicsStyle) public static RaycastHit2D[] BoxCastAll(Vector2 origin, Vector2 size, float angle, Vector2 direction, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 angle float direction Vector2 physicsStyle PhysicsStyle Returns RaycastHit2D[] BoxCastAll(Vector2, Vector2, float, Vector2, float, PhysicsStyle) public static RaycastHit2D[] BoxCastAll(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 angle float direction Vector2 distance float physicsStyle PhysicsStyle Returns RaycastHit2D[] BoxCastAll(Vector2, Vector2, float, Vector2, float, int, PhysicsStyle) public static RaycastHit2D[] BoxCastAll(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, int layerMask, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 angle float direction Vector2 distance float layerMask int physicsStyle PhysicsStyle Returns RaycastHit2D[] BoxCastAll(Vector2, Vector2, float, Vector2, float, int, float, PhysicsStyle) public static RaycastHit2D[] BoxCastAll(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, int layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 angle float direction Vector2 distance float layerMask int minDepth float physicsStyle PhysicsStyle Returns RaycastHit2D[] BoxCastAll(Vector2, Vector2, float, Vector2, float, int, float, float, PhysicsStyle) public static RaycastHit2D[] BoxCastAll(Vector2 origin, Vector2 size, float angle, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 angle float direction Vector2 distance float layerMask int minDepth float maxDepth float physicsStyle PhysicsStyle Returns RaycastHit2D[] BoxCastNonAlloc(Vector2, Vector2, float, Vector2, RaycastHit2D[], PhysicsStyle) public static int BoxCastNonAlloc(Vector2 origin, Vector2 size, float angle, Vector2 direction, RaycastHit2D[] results, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 angle float direction Vector2 results RaycastHit2D[] physicsStyle PhysicsStyle Returns int BoxCastNonAlloc(Vector2, Vector2, float, Vector2, RaycastHit2D[], float, PhysicsStyle) public static int BoxCastNonAlloc(Vector2 origin, Vector2 size, float angle, Vector2 direction, RaycastHit2D[] results, float distance, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 angle float direction Vector2 results RaycastHit2D[] distance float physicsStyle PhysicsStyle Returns int BoxCastNonAlloc(Vector2, Vector2, float, Vector2, RaycastHit2D[], float, int, PhysicsStyle) public static int BoxCastNonAlloc(Vector2 origin, Vector2 size, float angle, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 angle float direction Vector2 results RaycastHit2D[] distance float layerMask int physicsStyle PhysicsStyle Returns int BoxCastNonAlloc(Vector2, Vector2, float, Vector2, RaycastHit2D[], float, int, float, PhysicsStyle) public static int BoxCastNonAlloc(Vector2 origin, Vector2 size, float angle, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 angle float direction Vector2 results RaycastHit2D[] distance float layerMask int minDepth float physicsStyle PhysicsStyle Returns int BoxCastNonAlloc(Vector2, Vector2, float, Vector2, RaycastHit2D[], float, int, float, float, PhysicsStyle) public static int BoxCastNonAlloc(Vector2 origin, Vector2 size, float angle, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 angle float direction Vector2 results RaycastHit2D[] distance float layerMask int minDepth float maxDepth float physicsStyle PhysicsStyle Returns int CapsuleCast(Vector2, Vector2, CapsuleDirection2D, float, Vector2, PhysicsStyle) public static RaycastHit2D CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 capsuleDirection CapsuleDirection2D angle float direction Vector2 physicsStyle PhysicsStyle Returns RaycastHit2D CapsuleCast(Vector2, Vector2, CapsuleDirection2D, float, Vector2, float, PhysicsStyle) public static RaycastHit2D CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 capsuleDirection CapsuleDirection2D angle float direction Vector2 distance float physicsStyle PhysicsStyle Returns RaycastHit2D CapsuleCast(Vector2, Vector2, CapsuleDirection2D, float, Vector2, float, int, PhysicsStyle) public static RaycastHit2D CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, int layerMask, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 capsuleDirection CapsuleDirection2D angle float direction Vector2 distance float layerMask int physicsStyle PhysicsStyle Returns RaycastHit2D CapsuleCast(Vector2, Vector2, CapsuleDirection2D, float, Vector2, float, int, float, PhysicsStyle) public static RaycastHit2D CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, int layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 capsuleDirection CapsuleDirection2D angle float direction Vector2 distance float layerMask int minDepth float physicsStyle PhysicsStyle Returns RaycastHit2D CapsuleCast(Vector2, Vector2, CapsuleDirection2D, float, Vector2, float, int, float, float, PhysicsStyle) public static RaycastHit2D CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 capsuleDirection CapsuleDirection2D angle float direction Vector2 distance float layerMask int minDepth float maxDepth float physicsStyle PhysicsStyle Returns RaycastHit2D CapsuleCast(Vector2, Vector2, CapsuleDirection2D, float, Vector2, ContactFilter2D, List<RaycastHit2D>, PhysicsStyle) public static int CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, ContactFilter2D contactFilter, List<RaycastHit2D> results, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 capsuleDirection CapsuleDirection2D angle float direction Vector2 contactFilter ContactFilter2D results List<RaycastHit2D> physicsStyle PhysicsStyle Returns int CapsuleCast(Vector2, Vector2, CapsuleDirection2D, float, Vector2, ContactFilter2D, List<RaycastHit2D>, float, PhysicsStyle) public static int CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, ContactFilter2D contactFilter, List<RaycastHit2D> results, float distance, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 capsuleDirection CapsuleDirection2D angle float direction Vector2 contactFilter ContactFilter2D results List<RaycastHit2D> distance float physicsStyle PhysicsStyle Returns int CapsuleCast(Vector2, Vector2, CapsuleDirection2D, float, Vector2, ContactFilter2D, RaycastHit2D[], PhysicsStyle) public static int CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 capsuleDirection CapsuleDirection2D angle float direction Vector2 contactFilter ContactFilter2D results RaycastHit2D[] physicsStyle PhysicsStyle Returns int CapsuleCast(Vector2, Vector2, CapsuleDirection2D, float, Vector2, ContactFilter2D, RaycastHit2D[], float, PhysicsStyle) public static int CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, float distance, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 capsuleDirection CapsuleDirection2D angle float direction Vector2 contactFilter ContactFilter2D results RaycastHit2D[] distance float physicsStyle PhysicsStyle Returns int CapsuleCastAll(Vector2, Vector2, CapsuleDirection2D, float, Vector2, PhysicsStyle) public static RaycastHit2D[] CapsuleCastAll(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 capsuleDirection CapsuleDirection2D angle float direction Vector2 physicsStyle PhysicsStyle Returns RaycastHit2D[] CapsuleCastAll(Vector2, Vector2, CapsuleDirection2D, float, Vector2, float, PhysicsStyle) public static RaycastHit2D[] CapsuleCastAll(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 capsuleDirection CapsuleDirection2D angle float direction Vector2 distance float physicsStyle PhysicsStyle Returns RaycastHit2D[] CapsuleCastAll(Vector2, Vector2, CapsuleDirection2D, float, Vector2, float, int, PhysicsStyle) public static RaycastHit2D[] CapsuleCastAll(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, int layerMask, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 capsuleDirection CapsuleDirection2D angle float direction Vector2 distance float layerMask int physicsStyle PhysicsStyle Returns RaycastHit2D[] CapsuleCastAll(Vector2, Vector2, CapsuleDirection2D, float, Vector2, float, int, float, PhysicsStyle) public static RaycastHit2D[] CapsuleCastAll(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, int layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 capsuleDirection CapsuleDirection2D angle float direction Vector2 distance float layerMask int minDepth float physicsStyle PhysicsStyle Returns RaycastHit2D[] CapsuleCastAll(Vector2, Vector2, CapsuleDirection2D, float, Vector2, float, int, float, float, PhysicsStyle) public static RaycastHit2D[] CapsuleCastAll(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 capsuleDirection CapsuleDirection2D angle float direction Vector2 distance float layerMask int minDepth float maxDepth float physicsStyle PhysicsStyle Returns RaycastHit2D[] CapsuleCastNonAlloc(Vector2, Vector2, CapsuleDirection2D, float, Vector2, RaycastHit2D[], PhysicsStyle) public static int CapsuleCastNonAlloc(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, RaycastHit2D[] results, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 capsuleDirection CapsuleDirection2D angle float direction Vector2 results RaycastHit2D[] physicsStyle PhysicsStyle Returns int CapsuleCastNonAlloc(Vector2, Vector2, CapsuleDirection2D, float, Vector2, RaycastHit2D[], float, PhysicsStyle) public static int CapsuleCastNonAlloc(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, RaycastHit2D[] results, float distance, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 capsuleDirection CapsuleDirection2D angle float direction Vector2 results RaycastHit2D[] distance float physicsStyle PhysicsStyle Returns int CapsuleCastNonAlloc(Vector2, Vector2, CapsuleDirection2D, float, Vector2, RaycastHit2D[], float, int, PhysicsStyle) public static int CapsuleCastNonAlloc(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 capsuleDirection CapsuleDirection2D angle float direction Vector2 results RaycastHit2D[] distance float layerMask int physicsStyle PhysicsStyle Returns int CapsuleCastNonAlloc(Vector2, Vector2, CapsuleDirection2D, float, Vector2, RaycastHit2D[], float, int, float, PhysicsStyle) public static int CapsuleCastNonAlloc(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 capsuleDirection CapsuleDirection2D angle float direction Vector2 results RaycastHit2D[] distance float layerMask int minDepth float physicsStyle PhysicsStyle Returns int CapsuleCastNonAlloc(Vector2, Vector2, CapsuleDirection2D, float, Vector2, RaycastHit2D[], float, int, float, float, PhysicsStyle) public static int CapsuleCastNonAlloc(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters origin Vector2 size Vector2 capsuleDirection CapsuleDirection2D angle float direction Vector2 results RaycastHit2D[] distance float layerMask int minDepth float maxDepth float physicsStyle PhysicsStyle Returns int CircleCast(Vector2, float, Vector2, PhysicsStyle) public static RaycastHit2D CircleCast(Vector2 origin, float radius, Vector2 direction, PhysicsStyle physicsStyle = default) Parameters origin Vector2 radius float direction Vector2 physicsStyle PhysicsStyle Returns RaycastHit2D CircleCast(Vector2, float, Vector2, float, PhysicsStyle) public static RaycastHit2D CircleCast(Vector2 origin, float radius, Vector2 direction, float distance, PhysicsStyle physicsStyle = default) Parameters origin Vector2 radius float direction Vector2 distance float physicsStyle PhysicsStyle Returns RaycastHit2D CircleCast(Vector2, float, Vector2, float, int, PhysicsStyle) public static RaycastHit2D CircleCast(Vector2 origin, float radius, Vector2 direction, float distance, int layerMask, PhysicsStyle physicsStyle = default) Parameters origin Vector2 radius float direction Vector2 distance float layerMask int physicsStyle PhysicsStyle Returns RaycastHit2D CircleCast(Vector2, float, Vector2, float, int, float, PhysicsStyle) public static RaycastHit2D CircleCast(Vector2 origin, float radius, Vector2 direction, float distance, int layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters origin Vector2 radius float direction Vector2 distance float layerMask int minDepth float physicsStyle PhysicsStyle Returns RaycastHit2D CircleCast(Vector2, float, Vector2, float, int, float, float, PhysicsStyle) public static RaycastHit2D CircleCast(Vector2 origin, float radius, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters origin Vector2 radius float direction Vector2 distance float layerMask int minDepth float maxDepth float physicsStyle PhysicsStyle Returns RaycastHit2D CircleCast(Vector2, float, Vector2, ContactFilter2D, List<RaycastHit2D>, PhysicsStyle) public static int CircleCast(Vector2 origin, float radius, Vector2 direction, ContactFilter2D contactFilter, List<RaycastHit2D> results, PhysicsStyle physicsStyle = default) Parameters origin Vector2 radius float direction Vector2 contactFilter ContactFilter2D results List<RaycastHit2D> physicsStyle PhysicsStyle Returns int CircleCast(Vector2, float, Vector2, ContactFilter2D, List<RaycastHit2D>, float, PhysicsStyle) public static int CircleCast(Vector2 origin, float radius, Vector2 direction, ContactFilter2D contactFilter, List<RaycastHit2D> results, float distance, PhysicsStyle physicsStyle = default) Parameters origin Vector2 radius float direction Vector2 contactFilter ContactFilter2D results List<RaycastHit2D> distance float physicsStyle PhysicsStyle Returns int CircleCast(Vector2, float, Vector2, ContactFilter2D, RaycastHit2D[], PhysicsStyle) public static int CircleCast(Vector2 origin, float radius, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, PhysicsStyle physicsStyle = default) Parameters origin Vector2 radius float direction Vector2 contactFilter ContactFilter2D results RaycastHit2D[] physicsStyle PhysicsStyle Returns int CircleCast(Vector2, float, Vector2, ContactFilter2D, RaycastHit2D[], float, PhysicsStyle) public static int CircleCast(Vector2 origin, float radius, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, float distance, PhysicsStyle physicsStyle = default) Parameters origin Vector2 radius float direction Vector2 contactFilter ContactFilter2D results RaycastHit2D[] distance float physicsStyle PhysicsStyle Returns int CircleCastAll(Vector2, float, Vector2, PhysicsStyle) public static RaycastHit2D[] CircleCastAll(Vector2 origin, float radius, Vector2 direction, PhysicsStyle physicsStyle = default) Parameters origin Vector2 radius float direction Vector2 physicsStyle PhysicsStyle Returns RaycastHit2D[] CircleCastAll(Vector2, float, Vector2, float, PhysicsStyle) public static RaycastHit2D[] CircleCastAll(Vector2 origin, float radius, Vector2 direction, float distance, PhysicsStyle physicsStyle = default) Parameters origin Vector2 radius float direction Vector2 distance float physicsStyle PhysicsStyle Returns RaycastHit2D[] CircleCastAll(Vector2, float, Vector2, float, int, PhysicsStyle) public static RaycastHit2D[] CircleCastAll(Vector2 origin, float radius, Vector2 direction, float distance, int layerMask, PhysicsStyle physicsStyle = default) Parameters origin Vector2 radius float direction Vector2 distance float layerMask int physicsStyle PhysicsStyle Returns RaycastHit2D[] CircleCastAll(Vector2, float, Vector2, float, int, float, PhysicsStyle) public static RaycastHit2D[] CircleCastAll(Vector2 origin, float radius, Vector2 direction, float distance, int layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters origin Vector2 radius float direction Vector2 distance float layerMask int minDepth float physicsStyle PhysicsStyle Returns RaycastHit2D[] CircleCastAll(Vector2, float, Vector2, float, int, float, float, PhysicsStyle) public static RaycastHit2D[] CircleCastAll(Vector2 origin, float radius, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters origin Vector2 radius float direction Vector2 distance float layerMask int minDepth float maxDepth float physicsStyle PhysicsStyle Returns RaycastHit2D[] CircleCastNonAlloc(Vector2, float, Vector2, RaycastHit2D[], PhysicsStyle) public static int CircleCastNonAlloc(Vector2 origin, float radius, Vector2 direction, RaycastHit2D[] results, PhysicsStyle physicsStyle = default) Parameters origin Vector2 radius float direction Vector2 results RaycastHit2D[] physicsStyle PhysicsStyle Returns int CircleCastNonAlloc(Vector2, float, Vector2, RaycastHit2D[], float, PhysicsStyle) public static int CircleCastNonAlloc(Vector2 origin, float radius, Vector2 direction, RaycastHit2D[] results, float distance, PhysicsStyle physicsStyle = default) Parameters origin Vector2 radius float direction Vector2 results RaycastHit2D[] distance float physicsStyle PhysicsStyle Returns int CircleCastNonAlloc(Vector2, float, Vector2, RaycastHit2D[], float, int, PhysicsStyle) public static int CircleCastNonAlloc(Vector2 origin, float radius, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, PhysicsStyle physicsStyle = default) Parameters origin Vector2 radius float direction Vector2 results RaycastHit2D[] distance float layerMask int physicsStyle PhysicsStyle Returns int CircleCastNonAlloc(Vector2, float, Vector2, RaycastHit2D[], float, int, float, PhysicsStyle) public static int CircleCastNonAlloc(Vector2 origin, float radius, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters origin Vector2 radius float direction Vector2 results RaycastHit2D[] distance float layerMask int minDepth float physicsStyle PhysicsStyle Returns int CircleCastNonAlloc(Vector2, float, Vector2, RaycastHit2D[], float, int, float, float, PhysicsStyle) public static int CircleCastNonAlloc(Vector2 origin, float radius, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters origin Vector2 radius float direction Vector2 results RaycastHit2D[] distance float layerMask int minDepth float maxDepth float physicsStyle PhysicsStyle Returns int Linecast(Vector2, Vector2, PhysicsStyle) public static RaycastHit2D Linecast(Vector2 start, Vector2 end, PhysicsStyle physicsStyle = default) Parameters start Vector2 end Vector2 physicsStyle PhysicsStyle Returns RaycastHit2D Linecast(Vector2, Vector2, int, PhysicsStyle) public static RaycastHit2D Linecast(Vector2 start, Vector2 end, int layerMask, PhysicsStyle physicsStyle = default) Parameters start Vector2 end Vector2 layerMask int physicsStyle PhysicsStyle Returns RaycastHit2D Linecast(Vector2, Vector2, int, float, PhysicsStyle) public static RaycastHit2D Linecast(Vector2 start, Vector2 end, int layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters start Vector2 end Vector2 layerMask int minDepth float physicsStyle PhysicsStyle Returns RaycastHit2D Linecast(Vector2, Vector2, int, float, float, PhysicsStyle) public static RaycastHit2D Linecast(Vector2 start, Vector2 end, int layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters start Vector2 end Vector2 layerMask int minDepth float maxDepth float physicsStyle PhysicsStyle Returns RaycastHit2D Linecast(Vector2, Vector2, ContactFilter2D, List<RaycastHit2D>, PhysicsStyle) public static int Linecast(Vector2 start, Vector2 end, ContactFilter2D contactFilter, List<RaycastHit2D> results, PhysicsStyle physicsStyle = default) Parameters start Vector2 end Vector2 contactFilter ContactFilter2D results List<RaycastHit2D> physicsStyle PhysicsStyle Returns int Linecast(Vector2, Vector2, ContactFilter2D, RaycastHit2D[], PhysicsStyle) public static int Linecast(Vector2 start, Vector2 end, ContactFilter2D contactFilter, RaycastHit2D[] results, PhysicsStyle physicsStyle = default) Parameters start Vector2 end Vector2 contactFilter ContactFilter2D results RaycastHit2D[] physicsStyle PhysicsStyle Returns int LinecastAll(Vector2, Vector2, PhysicsStyle) public static RaycastHit2D[] LinecastAll(Vector2 start, Vector2 end, PhysicsStyle physicsStyle = default) Parameters start Vector2 end Vector2 physicsStyle PhysicsStyle Returns RaycastHit2D[] LinecastAll(Vector2, Vector2, int, PhysicsStyle) public static RaycastHit2D[] LinecastAll(Vector2 start, Vector2 end, int layerMask, PhysicsStyle physicsStyle = default) Parameters start Vector2 end Vector2 layerMask int physicsStyle PhysicsStyle Returns RaycastHit2D[] LinecastAll(Vector2, Vector2, int, float, PhysicsStyle) public static RaycastHit2D[] LinecastAll(Vector2 start, Vector2 end, int layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters start Vector2 end Vector2 layerMask int minDepth float physicsStyle PhysicsStyle Returns RaycastHit2D[] LinecastAll(Vector2, Vector2, int, float, float, PhysicsStyle) public static RaycastHit2D[] LinecastAll(Vector2 start, Vector2 end, int layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters start Vector2 end Vector2 layerMask int minDepth float maxDepth float physicsStyle PhysicsStyle Returns RaycastHit2D[] LinecastNonAlloc(Vector2, Vector2, RaycastHit2D[], PhysicsStyle) public static int LinecastNonAlloc(Vector2 start, Vector2 end, RaycastHit2D[] results, PhysicsStyle physicsStyle = default) Parameters start Vector2 end Vector2 results RaycastHit2D[] physicsStyle PhysicsStyle Returns int LinecastNonAlloc(Vector2, Vector2, RaycastHit2D[], int, PhysicsStyle) public static int LinecastNonAlloc(Vector2 start, Vector2 end, RaycastHit2D[] results, int layerMask, PhysicsStyle physicsStyle = default) Parameters start Vector2 end Vector2 results RaycastHit2D[] layerMask int physicsStyle PhysicsStyle Returns int LinecastNonAlloc(Vector2, Vector2, RaycastHit2D[], int, float, PhysicsStyle) public static int LinecastNonAlloc(Vector2 start, Vector2 end, RaycastHit2D[] results, int layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters start Vector2 end Vector2 results RaycastHit2D[] layerMask int minDepth float physicsStyle PhysicsStyle Returns int LinecastNonAlloc(Vector2, Vector2, RaycastHit2D[], int, float, float, PhysicsStyle) public static int LinecastNonAlloc(Vector2 start, Vector2 end, RaycastHit2D[] results, int layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters start Vector2 end Vector2 results RaycastHit2D[] layerMask int minDepth float maxDepth float physicsStyle PhysicsStyle Returns int OverlapArea(Vector2, Vector2, PhysicsStyle) public static Collider2D OverlapArea(Vector2 pointA, Vector2 pointB, PhysicsStyle physicsStyle = default) Parameters pointA Vector2 pointB Vector2 physicsStyle PhysicsStyle Returns Collider2D OverlapArea(Vector2, Vector2, int, PhysicsStyle) public static Collider2D OverlapArea(Vector2 pointA, Vector2 pointB, int layerMask, PhysicsStyle physicsStyle = default) Parameters pointA Vector2 pointB Vector2 layerMask int physicsStyle PhysicsStyle Returns Collider2D OverlapArea(Vector2, Vector2, int, float, PhysicsStyle) public static Collider2D OverlapArea(Vector2 pointA, Vector2 pointB, int layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters pointA Vector2 pointB Vector2 layerMask int minDepth float physicsStyle PhysicsStyle Returns Collider2D OverlapArea(Vector2, Vector2, int, float, float, PhysicsStyle) public static Collider2D OverlapArea(Vector2 pointA, Vector2 pointB, int layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters pointA Vector2 pointB Vector2 layerMask int minDepth float maxDepth float physicsStyle PhysicsStyle Returns Collider2D OverlapArea(Vector2, Vector2, ContactFilter2D, List<Collider2D>, PhysicsStyle) public static int OverlapArea(Vector2 pointA, Vector2 pointB, ContactFilter2D contactFilter, List<Collider2D> results, PhysicsStyle physicsStyle = default) Parameters pointA Vector2 pointB Vector2 contactFilter ContactFilter2D results List<Collider2D> physicsStyle PhysicsStyle Returns int OverlapArea(Vector2, Vector2, ContactFilter2D, Collider2D[], PhysicsStyle) public static int OverlapArea(Vector2 pointA, Vector2 pointB, ContactFilter2D contactFilter, Collider2D[] results, PhysicsStyle physicsStyle = default) Parameters pointA Vector2 pointB Vector2 contactFilter ContactFilter2D results Collider2D[] physicsStyle PhysicsStyle Returns int OverlapAreaAll(Vector2, Vector2, PhysicsStyle) public static Collider2D[] OverlapAreaAll(Vector2 pointA, Vector2 pointB, PhysicsStyle physicsStyle = default) Parameters pointA Vector2 pointB Vector2 physicsStyle PhysicsStyle Returns Collider2D[] OverlapAreaAll(Vector2, Vector2, int, PhysicsStyle) public static Collider2D[] OverlapAreaAll(Vector2 pointA, Vector2 pointB, int layerMask, PhysicsStyle physicsStyle = default) Parameters pointA Vector2 pointB Vector2 layerMask int physicsStyle PhysicsStyle Returns Collider2D[] OverlapAreaAll(Vector2, Vector2, int, float, PhysicsStyle) public static Collider2D[] OverlapAreaAll(Vector2 pointA, Vector2 pointB, int layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters pointA Vector2 pointB Vector2 layerMask int minDepth float physicsStyle PhysicsStyle Returns Collider2D[] OverlapAreaAll(Vector2, Vector2, int, float, float, PhysicsStyle) public static Collider2D[] OverlapAreaAll(Vector2 pointA, Vector2 pointB, int layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters pointA Vector2 pointB Vector2 layerMask int minDepth float maxDepth float physicsStyle PhysicsStyle Returns Collider2D[] OverlapAreaNonAlloc(Vector2, Vector2, Collider2D[], PhysicsStyle) public static int OverlapAreaNonAlloc(Vector2 pointA, Vector2 pointB, Collider2D[] results, PhysicsStyle physicsStyle = default) Parameters pointA Vector2 pointB Vector2 results Collider2D[] physicsStyle PhysicsStyle Returns int OverlapAreaNonAlloc(Vector2, Vector2, Collider2D[], int, PhysicsStyle) public static int OverlapAreaNonAlloc(Vector2 pointA, Vector2 pointB, Collider2D[] results, int layerMask, PhysicsStyle physicsStyle = default) Parameters pointA Vector2 pointB Vector2 results Collider2D[] layerMask int physicsStyle PhysicsStyle Returns int OverlapAreaNonAlloc(Vector2, Vector2, Collider2D[], int, float, PhysicsStyle) public static int OverlapAreaNonAlloc(Vector2 pointA, Vector2 pointB, Collider2D[] results, int layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters pointA Vector2 pointB Vector2 results Collider2D[] layerMask int minDepth float physicsStyle PhysicsStyle Returns int OverlapAreaNonAlloc(Vector2, Vector2, Collider2D[], int, float, float, PhysicsStyle) public static int OverlapAreaNonAlloc(Vector2 pointA, Vector2 pointB, Collider2D[] results, int layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters pointA Vector2 pointB Vector2 results Collider2D[] layerMask int minDepth float maxDepth float physicsStyle PhysicsStyle Returns int OverlapBox(Vector2, Vector2, float, PhysicsStyle) public static Collider2D OverlapBox(Vector2 point, Vector2 size, float angle, PhysicsStyle physicsStyle = default) Parameters point Vector2 size Vector2 angle float physicsStyle PhysicsStyle Returns Collider2D OverlapBox(Vector2, Vector2, float, int, PhysicsStyle) public static Collider2D OverlapBox(Vector2 point, Vector2 size, float angle, int layerMask, PhysicsStyle physicsStyle = default) Parameters point Vector2 size Vector2 angle float layerMask int physicsStyle PhysicsStyle Returns Collider2D OverlapBox(Vector2, Vector2, float, int, float, PhysicsStyle) public static Collider2D OverlapBox(Vector2 point, Vector2 size, float angle, int layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters point Vector2 size Vector2 angle float layerMask int minDepth float physicsStyle PhysicsStyle Returns Collider2D OverlapBox(Vector2, Vector2, float, int, float, float, PhysicsStyle) public static Collider2D OverlapBox(Vector2 point, Vector2 size, float angle, int layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters point Vector2 size Vector2 angle float layerMask int minDepth float maxDepth float physicsStyle PhysicsStyle Returns Collider2D OverlapBox(Vector2, Vector2, float, ContactFilter2D, List<Collider2D>, PhysicsStyle) public static int OverlapBox(Vector2 point, Vector2 size, float angle, ContactFilter2D contactFilter, List<Collider2D> results, PhysicsStyle physicsStyle = default) Parameters point Vector2 size Vector2 angle float contactFilter ContactFilter2D results List<Collider2D> physicsStyle PhysicsStyle Returns int OverlapBox(Vector2, Vector2, float, ContactFilter2D, Collider2D[], PhysicsStyle) public static int OverlapBox(Vector2 point, Vector2 size, float angle, ContactFilter2D contactFilter, Collider2D[] results, PhysicsStyle physicsStyle = default) Parameters point Vector2 size Vector2 angle float contactFilter ContactFilter2D results Collider2D[] physicsStyle PhysicsStyle Returns int OverlapBoxAll(Vector2, Vector2, float, PhysicsStyle) public static Collider2D[] OverlapBoxAll(Vector2 point, Vector2 size, float angle, PhysicsStyle physicsStyle = default) Parameters point Vector2 size Vector2 angle float physicsStyle PhysicsStyle Returns Collider2D[] OverlapBoxAll(Vector2, Vector2, float, int, PhysicsStyle) public static Collider2D[] OverlapBoxAll(Vector2 point, Vector2 size, float angle, int layerMask, PhysicsStyle physicsStyle = default) Parameters point Vector2 size Vector2 angle float layerMask int physicsStyle PhysicsStyle Returns Collider2D[] OverlapBoxAll(Vector2, Vector2, float, int, float, PhysicsStyle) public static Collider2D[] OverlapBoxAll(Vector2 point, Vector2 size, float angle, int layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters point Vector2 size Vector2 angle float layerMask int minDepth float physicsStyle PhysicsStyle Returns Collider2D[] OverlapBoxAll(Vector2, Vector2, float, int, float, float, PhysicsStyle) public static Collider2D[] OverlapBoxAll(Vector2 point, Vector2 size, float angle, int layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters point Vector2 size Vector2 angle float layerMask int minDepth float maxDepth float physicsStyle PhysicsStyle Returns Collider2D[] OverlapBoxNonAlloc(Vector2, Vector2, float, Collider2D[], PhysicsStyle) public static int OverlapBoxNonAlloc(Vector2 point, Vector2 size, float angle, Collider2D[] results, PhysicsStyle physicsStyle = default) Parameters point Vector2 size Vector2 angle float results Collider2D[] physicsStyle PhysicsStyle Returns int OverlapBoxNonAlloc(Vector2, Vector2, float, Collider2D[], int, PhysicsStyle) public static int OverlapBoxNonAlloc(Vector2 point, Vector2 size, float angle, Collider2D[] results, int layerMask, PhysicsStyle physicsStyle = default) Parameters point Vector2 size Vector2 angle float results Collider2D[] layerMask int physicsStyle PhysicsStyle Returns int OverlapBoxNonAlloc(Vector2, Vector2, float, Collider2D[], int, float, PhysicsStyle) public static int OverlapBoxNonAlloc(Vector2 point, Vector2 size, float angle, Collider2D[] results, int layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters point Vector2 size Vector2 angle float results Collider2D[] layerMask int minDepth float physicsStyle PhysicsStyle Returns int OverlapBoxNonAlloc(Vector2, Vector2, float, Collider2D[], int, float, float, PhysicsStyle) public static int OverlapBoxNonAlloc(Vector2 point, Vector2 size, float angle, Collider2D[] results, int layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters point Vector2 size Vector2 angle float results Collider2D[] layerMask int minDepth float maxDepth float physicsStyle PhysicsStyle Returns int OverlapCapsule(Vector2, Vector2, CapsuleDirection2D, float, PhysicsStyle) public static Collider2D OverlapCapsule(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, PhysicsStyle physicsStyle = default) Parameters point Vector2 size Vector2 direction CapsuleDirection2D angle float physicsStyle PhysicsStyle Returns Collider2D OverlapCapsule(Vector2, Vector2, CapsuleDirection2D, float, int, PhysicsStyle) public static Collider2D OverlapCapsule(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, int layerMask, PhysicsStyle physicsStyle = default) Parameters point Vector2 size Vector2 direction CapsuleDirection2D angle float layerMask int physicsStyle PhysicsStyle Returns Collider2D OverlapCapsule(Vector2, Vector2, CapsuleDirection2D, float, int, float, PhysicsStyle) public static Collider2D OverlapCapsule(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, int layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters point Vector2 size Vector2 direction CapsuleDirection2D angle float layerMask int minDepth float physicsStyle PhysicsStyle Returns Collider2D OverlapCapsule(Vector2, Vector2, CapsuleDirection2D, float, int, float, float, PhysicsStyle) public static Collider2D OverlapCapsule(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, int layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters point Vector2 size Vector2 direction CapsuleDirection2D angle float layerMask int minDepth float maxDepth float physicsStyle PhysicsStyle Returns Collider2D OverlapCapsule(Vector2, Vector2, CapsuleDirection2D, float, ContactFilter2D, List<Collider2D>, PhysicsStyle) public static int OverlapCapsule(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, ContactFilter2D contactFilter, List<Collider2D> results, PhysicsStyle physicsStyle = default) Parameters point Vector2 size Vector2 direction CapsuleDirection2D angle float contactFilter ContactFilter2D results List<Collider2D> physicsStyle PhysicsStyle Returns int OverlapCapsule(Vector2, Vector2, CapsuleDirection2D, float, ContactFilter2D, Collider2D[], PhysicsStyle) public static int OverlapCapsule(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, ContactFilter2D contactFilter, Collider2D[] results, PhysicsStyle physicsStyle = default) Parameters point Vector2 size Vector2 direction CapsuleDirection2D angle float contactFilter ContactFilter2D results Collider2D[] physicsStyle PhysicsStyle Returns int OverlapCapsuleAll(Vector2, Vector2, CapsuleDirection2D, float, PhysicsStyle) public static Collider2D[] OverlapCapsuleAll(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, PhysicsStyle physicsStyle = default) Parameters point Vector2 size Vector2 direction CapsuleDirection2D angle float physicsStyle PhysicsStyle Returns Collider2D[] OverlapCapsuleAll(Vector2, Vector2, CapsuleDirection2D, float, int, PhysicsStyle) public static Collider2D[] OverlapCapsuleAll(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, int layerMask, PhysicsStyle physicsStyle = default) Parameters point Vector2 size Vector2 direction CapsuleDirection2D angle float layerMask int physicsStyle PhysicsStyle Returns Collider2D[] OverlapCapsuleAll(Vector2, Vector2, CapsuleDirection2D, float, int, float, PhysicsStyle) public static Collider2D[] OverlapCapsuleAll(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, int layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters point Vector2 size Vector2 direction CapsuleDirection2D angle float layerMask int minDepth float physicsStyle PhysicsStyle Returns Collider2D[] OverlapCapsuleAll(Vector2, Vector2, CapsuleDirection2D, float, int, float, float, PhysicsStyle) public static Collider2D[] OverlapCapsuleAll(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, int layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters point Vector2 size Vector2 direction CapsuleDirection2D angle float layerMask int minDepth float maxDepth float physicsStyle PhysicsStyle Returns Collider2D[] OverlapCapsuleNonAlloc(Vector2, Vector2, CapsuleDirection2D, float, Collider2D[], PhysicsStyle) public static int OverlapCapsuleNonAlloc(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, Collider2D[] results, PhysicsStyle physicsStyle = default) Parameters point Vector2 size Vector2 direction CapsuleDirection2D angle float results Collider2D[] physicsStyle PhysicsStyle Returns int OverlapCapsuleNonAlloc(Vector2, Vector2, CapsuleDirection2D, float, Collider2D[], int, PhysicsStyle) public static int OverlapCapsuleNonAlloc(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, Collider2D[] results, int layerMask, PhysicsStyle physicsStyle = default) Parameters point Vector2 size Vector2 direction CapsuleDirection2D angle float results Collider2D[] layerMask int physicsStyle PhysicsStyle Returns int OverlapCapsuleNonAlloc(Vector2, Vector2, CapsuleDirection2D, float, Collider2D[], int, float, PhysicsStyle) public static int OverlapCapsuleNonAlloc(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, Collider2D[] results, int layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters point Vector2 size Vector2 direction CapsuleDirection2D angle float results Collider2D[] layerMask int minDepth float physicsStyle PhysicsStyle Returns int OverlapCapsuleNonAlloc(Vector2, Vector2, CapsuleDirection2D, float, Collider2D[], int, float, float, PhysicsStyle) public static int OverlapCapsuleNonAlloc(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, Collider2D[] results, int layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters point Vector2 size Vector2 direction CapsuleDirection2D angle float results Collider2D[] layerMask int minDepth float maxDepth float physicsStyle PhysicsStyle Returns int OverlapCircle(Vector2, float, PhysicsStyle) public static Collider2D OverlapCircle(Vector2 point, float radius, PhysicsStyle physicsStyle = default) Parameters point Vector2 radius float physicsStyle PhysicsStyle Returns Collider2D OverlapCircle(Vector2, float, int, PhysicsStyle) public static Collider2D OverlapCircle(Vector2 point, float radius, int layerMask, PhysicsStyle physicsStyle = default) Parameters point Vector2 radius float layerMask int physicsStyle PhysicsStyle Returns Collider2D OverlapCircle(Vector2, float, int, float, PhysicsStyle) public static Collider2D OverlapCircle(Vector2 point, float radius, int layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters point Vector2 radius float layerMask int minDepth float physicsStyle PhysicsStyle Returns Collider2D OverlapCircle(Vector2, float, int, float, float, PhysicsStyle) public static Collider2D OverlapCircle(Vector2 point, float radius, int layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters point Vector2 radius float layerMask int minDepth float maxDepth float physicsStyle PhysicsStyle Returns Collider2D OverlapCircle(Vector2, float, ContactFilter2D, List<Collider2D>, PhysicsStyle) public static int OverlapCircle(Vector2 point, float radius, ContactFilter2D contactFilter, List<Collider2D> results, PhysicsStyle physicsStyle = default) Parameters point Vector2 radius float contactFilter ContactFilter2D results List<Collider2D> physicsStyle PhysicsStyle Returns int OverlapCircle(Vector2, float, ContactFilter2D, Collider2D[], PhysicsStyle) public static int OverlapCircle(Vector2 point, float radius, ContactFilter2D contactFilter, Collider2D[] results, PhysicsStyle physicsStyle = default) Parameters point Vector2 radius float contactFilter ContactFilter2D results Collider2D[] physicsStyle PhysicsStyle Returns int OverlapCircleAll(Vector2, float, PhysicsStyle) public static Collider2D[] OverlapCircleAll(Vector2 point, float radius, PhysicsStyle physicsStyle = default) Parameters point Vector2 radius float physicsStyle PhysicsStyle Returns Collider2D[] OverlapCircleAll(Vector2, float, int, PhysicsStyle) public static Collider2D[] OverlapCircleAll(Vector2 point, float radius, int layerMask, PhysicsStyle physicsStyle = default) Parameters point Vector2 radius float layerMask int physicsStyle PhysicsStyle Returns Collider2D[] OverlapCircleAll(Vector2, float, int, float, PhysicsStyle) public static Collider2D[] OverlapCircleAll(Vector2 point, float radius, int layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters point Vector2 radius float layerMask int minDepth float physicsStyle PhysicsStyle Returns Collider2D[] OverlapCircleAll(Vector2, float, int, float, float, PhysicsStyle) public static Collider2D[] OverlapCircleAll(Vector2 point, float radius, int layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters point Vector2 radius float layerMask int minDepth float maxDepth float physicsStyle PhysicsStyle Returns Collider2D[] OverlapCircleNonAlloc(Vector2, float, Collider2D[], PhysicsStyle) public static int OverlapCircleNonAlloc(Vector2 point, float radius, Collider2D[] results, PhysicsStyle physicsStyle = default) Parameters point Vector2 radius float results Collider2D[] physicsStyle PhysicsStyle Returns int OverlapCircleNonAlloc(Vector2, float, Collider2D[], int, PhysicsStyle) public static int OverlapCircleNonAlloc(Vector2 point, float radius, Collider2D[] results, int layerMask, PhysicsStyle physicsStyle = default) Parameters point Vector2 radius float results Collider2D[] layerMask int physicsStyle PhysicsStyle Returns int OverlapCircleNonAlloc(Vector2, float, Collider2D[], int, float, PhysicsStyle) public static int OverlapCircleNonAlloc(Vector2 point, float radius, Collider2D[] results, int layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters point Vector2 radius float results Collider2D[] layerMask int minDepth float physicsStyle PhysicsStyle Returns int OverlapCircleNonAlloc(Vector2, float, Collider2D[], int, float, float, PhysicsStyle) public static int OverlapCircleNonAlloc(Vector2 point, float radius, Collider2D[] results, int layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters point Vector2 radius float results Collider2D[] layerMask int minDepth float maxDepth float physicsStyle PhysicsStyle Returns int OverlapPoint(Vector2, PhysicsStyle) public static Collider2D OverlapPoint(Vector2 point, PhysicsStyle physicsStyle = default) Parameters point Vector2 physicsStyle PhysicsStyle Returns Collider2D OverlapPoint(Vector2, int, PhysicsStyle) public static Collider2D OverlapPoint(Vector2 point, int layerMask, PhysicsStyle physicsStyle = default) Parameters point Vector2 layerMask int physicsStyle PhysicsStyle Returns Collider2D OverlapPoint(Vector2, int, float, PhysicsStyle) public static Collider2D OverlapPoint(Vector2 point, int layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters point Vector2 layerMask int minDepth float physicsStyle PhysicsStyle Returns Collider2D OverlapPoint(Vector2, int, float, float, PhysicsStyle) public static Collider2D OverlapPoint(Vector2 point, int layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters point Vector2 layerMask int minDepth float maxDepth float physicsStyle PhysicsStyle Returns Collider2D OverlapPoint(Vector2, ContactFilter2D, List<Collider2D>, PhysicsStyle) public static int OverlapPoint(Vector2 point, ContactFilter2D contactFilter, List<Collider2D> results, PhysicsStyle physicsStyle = default) Parameters point Vector2 contactFilter ContactFilter2D results List<Collider2D> physicsStyle PhysicsStyle Returns int OverlapPoint(Vector2, ContactFilter2D, Collider2D[], PhysicsStyle) public static int OverlapPoint(Vector2 point, ContactFilter2D contactFilter, Collider2D[] results, PhysicsStyle physicsStyle = default) Parameters point Vector2 contactFilter ContactFilter2D results Collider2D[] physicsStyle PhysicsStyle Returns int OverlapPointAll(Vector2, PhysicsStyle) public static Collider2D[] OverlapPointAll(Vector2 point, PhysicsStyle physicsStyle = default) Parameters point Vector2 physicsStyle PhysicsStyle Returns Collider2D[] OverlapPointAll(Vector2, int, PhysicsStyle) public static Collider2D[] OverlapPointAll(Vector2 point, int layerMask, PhysicsStyle physicsStyle = default) Parameters point Vector2 layerMask int physicsStyle PhysicsStyle Returns Collider2D[] OverlapPointAll(Vector2, int, float, PhysicsStyle) public static Collider2D[] OverlapPointAll(Vector2 point, int layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters point Vector2 layerMask int minDepth float physicsStyle PhysicsStyle Returns Collider2D[] OverlapPointAll(Vector2, int, float, float, PhysicsStyle) public static Collider2D[] OverlapPointAll(Vector2 point, int layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters point Vector2 layerMask int minDepth float maxDepth float physicsStyle PhysicsStyle Returns Collider2D[] OverlapPointNonAlloc(Vector2, Collider2D[], PhysicsStyle) public static int OverlapPointNonAlloc(Vector2 point, Collider2D[] results, PhysicsStyle physicsStyle = default) Parameters point Vector2 results Collider2D[] physicsStyle PhysicsStyle Returns int OverlapPointNonAlloc(Vector2, Collider2D[], int, PhysicsStyle) public static int OverlapPointNonAlloc(Vector2 point, Collider2D[] results, int layerMask, PhysicsStyle physicsStyle = default) Parameters point Vector2 results Collider2D[] layerMask int physicsStyle PhysicsStyle Returns int OverlapPointNonAlloc(Vector2, Collider2D[], int, float, PhysicsStyle) public static int OverlapPointNonAlloc(Vector2 point, Collider2D[] results, int layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters point Vector2 results Collider2D[] layerMask int minDepth float physicsStyle PhysicsStyle Returns int OverlapPointNonAlloc(Vector2, Collider2D[], int, float, float, PhysicsStyle) public static int OverlapPointNonAlloc(Vector2 point, Collider2D[] results, int layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters point Vector2 results Collider2D[] layerMask int minDepth float maxDepth float physicsStyle PhysicsStyle Returns int Raycast(Vector2, Vector2, PhysicsStyle) public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, PhysicsStyle physicsStyle = default) Parameters origin Vector2 direction Vector2 physicsStyle PhysicsStyle Returns RaycastHit2D Raycast(Vector2, Vector2, float, PhysicsStyle) public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, PhysicsStyle physicsStyle = default) Parameters origin Vector2 direction Vector2 distance float physicsStyle PhysicsStyle Returns RaycastHit2D Raycast(Vector2, Vector2, float, int, PhysicsStyle) public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask, PhysicsStyle physicsStyle = default) Parameters origin Vector2 direction Vector2 distance float layerMask int physicsStyle PhysicsStyle Returns RaycastHit2D Raycast(Vector2, Vector2, float, int, float, PhysicsStyle) public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters origin Vector2 direction Vector2 distance float layerMask int minDepth float physicsStyle PhysicsStyle Returns RaycastHit2D Raycast(Vector2, Vector2, float, int, float, float, PhysicsStyle) public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters origin Vector2 direction Vector2 distance float layerMask int minDepth float maxDepth float physicsStyle PhysicsStyle Returns RaycastHit2D Raycast(Vector2, Vector2, ContactFilter2D, List<RaycastHit2D>, float, PhysicsStyle) public static int Raycast(Vector2 origin, Vector2 direction, ContactFilter2D contactFilter, List<RaycastHit2D> results, float distance, PhysicsStyle physicsStyle = default) Parameters origin Vector2 direction Vector2 contactFilter ContactFilter2D results List<RaycastHit2D> distance float physicsStyle PhysicsStyle Returns int Raycast(Vector2, Vector2, ContactFilter2D, RaycastHit2D[], PhysicsStyle) public static int Raycast(Vector2 origin, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, PhysicsStyle physicsStyle = default) Parameters origin Vector2 direction Vector2 contactFilter ContactFilter2D results RaycastHit2D[] physicsStyle PhysicsStyle Returns int Raycast(Vector2, Vector2, ContactFilter2D, RaycastHit2D[], float, PhysicsStyle) public static int Raycast(Vector2 origin, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, float distance, PhysicsStyle physicsStyle = default) Parameters origin Vector2 direction Vector2 contactFilter ContactFilter2D results RaycastHit2D[] distance float physicsStyle PhysicsStyle Returns int RaycastAll(Vector2, Vector2, PhysicsStyle) public static RaycastHit2D[] RaycastAll(Vector2 origin, Vector2 direction, PhysicsStyle physicsStyle = default) Parameters origin Vector2 direction Vector2 physicsStyle PhysicsStyle Returns RaycastHit2D[] RaycastAll(Vector2, Vector2, float, PhysicsStyle) public static RaycastHit2D[] RaycastAll(Vector2 origin, Vector2 direction, float distance, PhysicsStyle physicsStyle = default) Parameters origin Vector2 direction Vector2 distance float physicsStyle PhysicsStyle Returns RaycastHit2D[] RaycastAll(Vector2, Vector2, float, int, PhysicsStyle) public static RaycastHit2D[] RaycastAll(Vector2 origin, Vector2 direction, float distance, int layerMask, PhysicsStyle physicsStyle = default) Parameters origin Vector2 direction Vector2 distance float layerMask int physicsStyle PhysicsStyle Returns RaycastHit2D[] RaycastAll(Vector2, Vector2, float, int, float, PhysicsStyle) public static RaycastHit2D[] RaycastAll(Vector2 origin, Vector2 direction, float distance, int layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters origin Vector2 direction Vector2 distance float layerMask int minDepth float physicsStyle PhysicsStyle Returns RaycastHit2D[] RaycastAll(Vector2, Vector2, float, int, float, float, PhysicsStyle) public static RaycastHit2D[] RaycastAll(Vector2 origin, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters origin Vector2 direction Vector2 distance float layerMask int minDepth float maxDepth float physicsStyle PhysicsStyle Returns RaycastHit2D[] RaycastNonAlloc(Vector2, Vector2, RaycastHit2D[], PhysicsStyle) public static int RaycastNonAlloc(Vector2 origin, Vector2 direction, RaycastHit2D[] results, PhysicsStyle physicsStyle = default) Parameters origin Vector2 direction Vector2 results RaycastHit2D[] physicsStyle PhysicsStyle Returns int RaycastNonAlloc(Vector2, Vector2, RaycastHit2D[], float, PhysicsStyle) public static int RaycastNonAlloc(Vector2 origin, Vector2 direction, RaycastHit2D[] results, float distance, PhysicsStyle physicsStyle = default) Parameters origin Vector2 direction Vector2 results RaycastHit2D[] distance float physicsStyle PhysicsStyle Returns int RaycastNonAlloc(Vector2, Vector2, RaycastHit2D[], float, int, PhysicsStyle) public static int RaycastNonAlloc(Vector2 origin, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, PhysicsStyle physicsStyle = default) Parameters origin Vector2 direction Vector2 results RaycastHit2D[] distance float layerMask int physicsStyle PhysicsStyle Returns int RaycastNonAlloc(Vector2, Vector2, RaycastHit2D[], float, int, float, PhysicsStyle) public static int RaycastNonAlloc(Vector2 origin, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, float minDepth, PhysicsStyle physicsStyle = default) Parameters origin Vector2 direction Vector2 results RaycastHit2D[] distance float layerMask int minDepth float physicsStyle PhysicsStyle Returns int RaycastNonAlloc(Vector2, Vector2, RaycastHit2D[], float, int, float, float, PhysicsStyle) public static int RaycastNonAlloc(Vector2 origin, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask, float minDepth, float maxDepth, PhysicsStyle physicsStyle = default) Parameters origin Vector2 direction Vector2 results RaycastHit2D[] distance float layerMask int minDepth float maxDepth float physicsStyle PhysicsStyle Returns int"
  },
  "api/DrawBug.PhysicsExtension.PhysicsExtension.html": {
    "href": "api/DrawBug.PhysicsExtension.PhysicsExtension.html",
    "title": "Class PhysicsExtension | DrawBug",
    "keywords": "Class PhysicsExtension Namespace DrawBug.PhysicsExtension Assembly DrawBug.dll public class PhysicsExtension Inheritance object PhysicsExtension Methods DrawBoxCast(Vector3, Vector3, Vector3, float, Quaternion, Color, float) public static void DrawBoxCast(Vector3 origin, Vector3 halfExtents, Vector3 direction, float distance, Quaternion orientation, Color color, float duration) Parameters origin Vector3 halfExtents Vector3 direction Vector3 distance float orientation Quaternion color Color duration float DrawBoxCast2D(Vector2, Vector2, Vector2, float, Quaternion, Color, float) public static void DrawBoxCast2D(Vector2 origin, Vector2 size, Vector2 direction, float distance, Quaternion rotation, Color color, float duration) Parameters origin Vector2 size Vector2 direction Vector2 distance float rotation Quaternion color Color duration float DrawCapsuleCast(Vector3, Vector3, float, Vector3, float, Color, float) public static void DrawCapsuleCast(Vector3 point1, Vector3 point2, float radius, Vector3 direction, float distance, Color color, float duration) Parameters point1 Vector3 point2 Vector3 radius float direction Vector3 distance float color Color duration float DrawCapsuleCast2D(Vector2, Vector2, CapsuleDirection2D, Vector2, float, Quaternion, Color, float) public static void DrawCapsuleCast2D(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, Vector2 direction, float distance, Quaternion rotation, Color color, float duration) Parameters origin Vector2 size Vector2 capsuleDirection CapsuleDirection2D direction Vector2 distance float rotation Quaternion color Color duration float DrawCircleCast2D(Vector2, float, Vector2, float, Color, float) public static void DrawCircleCast2D(Vector2 origin, float radius, Vector2 direction, float distance, Color color, float duration) Parameters origin Vector2 radius float direction Vector2 distance float color Color duration float DrawRayCast(Vector3, Vector3, float, Color, float) public static void DrawRayCast(Vector3 origin, Vector3 direction, float distance, Color color, float duration) Parameters origin Vector3 direction Vector3 distance float color Color duration float DrawRayCast(Vector3, Vector3, Color, float) public static void DrawRayCast(Vector3 point1, Vector3 point2, Color color, float duration) Parameters point1 Vector3 point2 Vector3 color Color duration float DrawRayCast2D(Vector2, Vector2, float, Color, float) public static void DrawRayCast2D(Vector2 origin, Vector2 direction, float distance, Color color, float duration) Parameters origin Vector2 direction Vector2 distance float color Color duration float DrawRayCast2D(Vector2, Vector2, Color, float) public static void DrawRayCast2D(Vector2 start, Vector2 end, Color color, float duration) Parameters start Vector2 end Vector2 color Color duration float DrawSphereCast(Vector3, float, Vector3, float, Color, float) public static void DrawSphereCast(Vector3 origin, float radius, Vector3 direction, float distance, Color color, float duration) Parameters origin Vector3 radius float direction Vector3 distance float color Color duration float"
  },
  "api/DrawBug.PhysicsExtension.PhysicsStyle.html": {
    "href": "api/DrawBug.PhysicsExtension.PhysicsStyle.html",
    "title": "Struct PhysicsStyle | DrawBug",
    "keywords": "Struct PhysicsStyle Namespace DrawBug.PhysicsExtension Assembly DrawBug.dll public struct PhysicsStyle Fields Duration public float Duration Field Value float HitColor public Color? HitColor Field Value Color? NoHitColor public Color? NoHitColor Field Value Color? Properties GetHitColor public Color GetHitColor { get; } Property Value Color GetNoHitColor public Color GetNoHitColor { get; } Property Value Color Methods Create(float) public static PhysicsStyle Create(float duration) Parameters duration float Returns PhysicsStyle GetPhysicsColor(bool) public Color GetPhysicsColor(bool collided) Parameters collided bool Returns Color Operators implicit operator float(PhysicsStyle) public static implicit operator float(PhysicsStyle style) Parameters style PhysicsStyle Returns float implicit operator PhysicsStyle((Color, Color)) public static implicit operator PhysicsStyle((Color, Color) colors) Parameters colors (Color wireColor, Color solidColor) Returns PhysicsStyle"
  },
  "api/DrawBug.PhysicsExtension.html": {
    "href": "api/DrawBug.PhysicsExtension.html",
    "title": "Namespace DrawBug.PhysicsExtension | DrawBug",
    "keywords": "Namespace DrawBug.PhysicsExtension Classes DrawPhysics DrawPhysics2D PhysicsExtension Structs PhysicsStyle"
  },
  "api/DrawBug.PolygonDrawers.ArrowPolygonDrawer.html": {
    "href": "api/DrawBug.PolygonDrawers.ArrowPolygonDrawer.html",
    "title": "Class ArrowPolygonDrawer | DrawBug",
    "keywords": "Class ArrowPolygonDrawer Namespace DrawBug.PolygonDrawers Assembly DrawBug.dll public class ArrowPolygonDrawer : PolygonDrawer Inheritance object PolygonDrawer ArrowPolygonDrawer Inherited Members PolygonDrawer.Get<T>() Constructors ArrowPolygonDrawer() public ArrowPolygonDrawer() Methods Draw(ref Vector3[], ref int[], params object[]) public override (int, int) Draw(ref Vector3[] vertices, ref int[] triangles, params object[] args) Parameters vertices Vector3[] triangles int[] args object[] Returns (int, int)"
  },
  "api/DrawBug.PolygonDrawers.ArrowPolygonDrawer3D.html": {
    "href": "api/DrawBug.PolygonDrawers.ArrowPolygonDrawer3D.html",
    "title": "Class ArrowPolygonDrawer3D | DrawBug",
    "keywords": "Class ArrowPolygonDrawer3D Namespace DrawBug.PolygonDrawers Assembly DrawBug.dll public class ArrowPolygonDrawer3D : PolygonDrawer Inheritance object PolygonDrawer ArrowPolygonDrawer3D Inherited Members PolygonDrawer.Get<T>() Constructors ArrowPolygonDrawer3D() public ArrowPolygonDrawer3D() Methods Draw(ref Vector3[], ref int[], params object[]) public override (int, int) Draw(ref Vector3[] vertices, ref int[] triangles, params object[] args) Parameters vertices Vector3[] triangles int[] args object[] Returns (int, int)"
  },
  "api/DrawBug.PolygonDrawers.CapsulePolygonDrawer.html": {
    "href": "api/DrawBug.PolygonDrawers.CapsulePolygonDrawer.html",
    "title": "Class CapsulePolygonDrawer | DrawBug",
    "keywords": "Class CapsulePolygonDrawer Namespace DrawBug.PolygonDrawers Assembly DrawBug.dll public class CapsulePolygonDrawer : PolygonDrawer Inheritance object PolygonDrawer CapsulePolygonDrawer Inherited Members PolygonDrawer.Get<T>() Constructors CapsulePolygonDrawer() public CapsulePolygonDrawer() Methods Draw(ref Vector3[], ref int[], params object[]) public override (int, int) Draw(ref Vector3[] vertices, ref int[] triangles, params object[] args) Parameters vertices Vector3[] triangles int[] args object[] Returns (int, int)"
  },
  "api/DrawBug.PolygonDrawers.CirclePolygonDrawer.html": {
    "href": "api/DrawBug.PolygonDrawers.CirclePolygonDrawer.html",
    "title": "Class CirclePolygonDrawer | DrawBug",
    "keywords": "Class CirclePolygonDrawer Namespace DrawBug.PolygonDrawers Assembly DrawBug.dll public class CirclePolygonDrawer : PolygonDrawer Inheritance object PolygonDrawer CirclePolygonDrawer Inherited Members PolygonDrawer.Get<T>() Constructors CirclePolygonDrawer() public CirclePolygonDrawer() Methods Draw(ref Vector3[], ref int[], params object[]) public override (int, int) Draw(ref Vector3[] vertices, ref int[] triangles, params object[] args) Parameters vertices Vector3[] triangles int[] args object[] Returns (int, int)"
  },
  "api/DrawBug.PolygonDrawers.ConePolygonDrawer.html": {
    "href": "api/DrawBug.PolygonDrawers.ConePolygonDrawer.html",
    "title": "Class ConePolygonDrawer | DrawBug",
    "keywords": "Class ConePolygonDrawer Namespace DrawBug.PolygonDrawers Assembly DrawBug.dll public class ConePolygonDrawer : PolygonDrawer Inheritance object PolygonDrawer ConePolygonDrawer Inherited Members PolygonDrawer.Get<T>() Constructors ConePolygonDrawer() public ConePolygonDrawer() Methods Draw(ref Vector3[], ref int[], params object[]) public override (int, int) Draw(ref Vector3[] vertices, ref int[] triangles, params object[] args) Parameters vertices Vector3[] triangles int[] args object[] Returns (int, int)"
  },
  "api/DrawBug.PolygonDrawers.CubePolygonDrawer.html": {
    "href": "api/DrawBug.PolygonDrawers.CubePolygonDrawer.html",
    "title": "Class CubePolygonDrawer | DrawBug",
    "keywords": "Class CubePolygonDrawer Namespace DrawBug.PolygonDrawers Assembly DrawBug.dll public class CubePolygonDrawer : PolygonDrawer Inheritance object PolygonDrawer CubePolygonDrawer Inherited Members PolygonDrawer.Get<T>() Constructors CubePolygonDrawer() public CubePolygonDrawer() Methods Draw(ref Vector3[], ref int[], params object[]) public override (int, int) Draw(ref Vector3[] vertices, ref int[] triangles, params object[] args) Parameters vertices Vector3[] triangles int[] args object[] Returns (int, int)"
  },
  "api/DrawBug.PolygonDrawers.CylinderPolygonDrawer.html": {
    "href": "api/DrawBug.PolygonDrawers.CylinderPolygonDrawer.html",
    "title": "Class CylinderPolygonDrawer | DrawBug",
    "keywords": "Class CylinderPolygonDrawer Namespace DrawBug.PolygonDrawers Assembly DrawBug.dll public class CylinderPolygonDrawer : PolygonDrawer Inheritance object PolygonDrawer CylinderPolygonDrawer Inherited Members PolygonDrawer.Get<T>() Constructors CylinderPolygonDrawer() public CylinderPolygonDrawer() Methods Draw(ref Vector3[], ref int[], params object[]) public override (int, int) Draw(ref Vector3[] vertices, ref int[] triangles, params object[] args) Parameters vertices Vector3[] triangles int[] args object[] Returns (int, int)"
  },
  "api/DrawBug.PolygonDrawers.DomePolygonDrawer.html": {
    "href": "api/DrawBug.PolygonDrawers.DomePolygonDrawer.html",
    "title": "Class DomePolygonDrawer | DrawBug",
    "keywords": "Class DomePolygonDrawer Namespace DrawBug.PolygonDrawers Assembly DrawBug.dll public class DomePolygonDrawer : PolygonDrawer Inheritance object PolygonDrawer DomePolygonDrawer Inherited Members PolygonDrawer.Get<T>() Constructors DomePolygonDrawer() public DomePolygonDrawer() Methods Draw(ref Vector3[], ref int[], params object[]) public override (int, int) Draw(ref Vector3[] vertices, ref int[] triangles, params object[] args) Parameters vertices Vector3[] triangles int[] args object[] Returns (int, int)"
  },
  "api/DrawBug.PolygonDrawers.HollowCirclePolygonDrawer.html": {
    "href": "api/DrawBug.PolygonDrawers.HollowCirclePolygonDrawer.html",
    "title": "Class HollowCirclePolygonDrawer | DrawBug",
    "keywords": "Class HollowCirclePolygonDrawer Namespace DrawBug.PolygonDrawers Assembly DrawBug.dll public class HollowCirclePolygonDrawer : PolygonDrawer Inheritance object PolygonDrawer HollowCirclePolygonDrawer Inherited Members PolygonDrawer.Get<T>() Constructors HollowCirclePolygonDrawer() public HollowCirclePolygonDrawer() Methods Draw(ref Vector3[], ref int[], params object[]) public override (int, int) Draw(ref Vector3[] vertices, ref int[] triangles, params object[] args) Parameters vertices Vector3[] triangles int[] args object[] Returns (int, int)"
  },
  "api/DrawBug.PolygonDrawers.PolygonDrawer.html": {
    "href": "api/DrawBug.PolygonDrawers.PolygonDrawer.html",
    "title": "Class PolygonDrawer | DrawBug",
    "keywords": "Class PolygonDrawer Namespace DrawBug.PolygonDrawers Assembly DrawBug.dll public abstract class PolygonDrawer Inheritance object PolygonDrawer Derived ArrowPolygonDrawer ArrowPolygonDrawer3D CapsulePolygonDrawer CirclePolygonDrawer ConePolygonDrawer CubePolygonDrawer CylinderPolygonDrawer DomePolygonDrawer HollowCirclePolygonDrawer SpherePolygonDrawer SquarePolygonDrawer Constructors PolygonDrawer() protected PolygonDrawer() Methods Draw(ref Vector3[], ref int[], params object[]) public abstract (int, int) Draw(ref Vector3[] vertices, ref int[] triangles, params object[] args) Parameters vertices Vector3[] triangles int[] args object[] Returns (int, int) Get<T>() public static PolygonDrawer Get<T>() where T : class Returns PolygonDrawer Type Parameters T"
  },
  "api/DrawBug.PolygonDrawers.SpherePolygonDrawer.html": {
    "href": "api/DrawBug.PolygonDrawers.SpherePolygonDrawer.html",
    "title": "Class SpherePolygonDrawer | DrawBug",
    "keywords": "Class SpherePolygonDrawer Namespace DrawBug.PolygonDrawers Assembly DrawBug.dll public class SpherePolygonDrawer : PolygonDrawer Inheritance object PolygonDrawer SpherePolygonDrawer Inherited Members PolygonDrawer.Get<T>() Constructors SpherePolygonDrawer() public SpherePolygonDrawer() Methods Draw(ref Vector3[], ref int[], params object[]) public override (int, int) Draw(ref Vector3[] vertices, ref int[] triangles, params object[] args) Parameters vertices Vector3[] triangles int[] args object[] Returns (int, int)"
  },
  "api/DrawBug.PolygonDrawers.SquarePolygonDrawer.html": {
    "href": "api/DrawBug.PolygonDrawers.SquarePolygonDrawer.html",
    "title": "Class SquarePolygonDrawer | DrawBug",
    "keywords": "Class SquarePolygonDrawer Namespace DrawBug.PolygonDrawers Assembly DrawBug.dll public class SquarePolygonDrawer : PolygonDrawer Inheritance object PolygonDrawer SquarePolygonDrawer Inherited Members PolygonDrawer.Get<T>() Methods Draw(ref Vector3[], ref int[], params object[]) public override (int, int) Draw(ref Vector3[] vertices, ref int[] triangles, params object[] args) Parameters vertices Vector3[] triangles int[] args object[] Returns (int, int)"
  },
  "api/DrawBug.PolygonDrawers.html": {
    "href": "api/DrawBug.PolygonDrawers.html",
    "title": "Namespace DrawBug.PolygonDrawers | DrawBug",
    "keywords": "Namespace DrawBug.PolygonDrawers Classes ArrowPolygonDrawer ArrowPolygonDrawer3D CapsulePolygonDrawer CirclePolygonDrawer ConePolygonDrawer CubePolygonDrawer CylinderPolygonDrawer DomePolygonDrawer HollowCirclePolygonDrawer PolygonDrawer SpherePolygonDrawer SquarePolygonDrawer"
  },
  "api/DrawBug.PolygonRenderer.html": {
    "href": "api/DrawBug.PolygonRenderer.html",
    "title": "Class PolygonRenderer | DrawBug",
    "keywords": "Class PolygonRenderer Namespace DrawBug Assembly DrawBug.dll public class PolygonRenderer Inheritance object PolygonRenderer Constructors PolygonRenderer() public PolygonRenderer() Properties Material public Material Material { get; set; } Property Value Material MaxBufferSize public int MaxBufferSize { get; set; } Property Value int NoZTestMaterial public Material NoZTestMaterial { get; set; } Property Value Material NoZTestMaxBufferSize public int NoZTestMaxBufferSize { get; set; } Property Value int NoZTestUsed public bool NoZTestUsed { get; } Property Value bool Methods RenderElements() public void RenderElements() Submit(Vector3[], int[], Color?, bool) public void Submit(Vector3[] vertices, int[] triangles, Color? color, bool overrideMode = false) Parameters vertices Vector3[] triangles int[] color Color? overrideMode bool"
  },
  "api/DrawBug.TextElement.html": {
    "href": "api/DrawBug.TextElement.html",
    "title": "Class TextElement | DrawBug",
    "keywords": "Class TextElement Namespace DrawBug Assembly DrawBug.dll public class TextElement Inheritance object TextElement Derived TimedTextElement Fields Color public Color? Color Field Value Color? FontAsset public TMP_FontAsset FontAsset Field Value TMP_FontAsset FontSize public int FontSize Field Value int Matrix4X4 public Matrix4x4 Matrix4X4 Field Value Matrix4x4 Pivot public TextPivot Pivot Field Value TextPivot StaticRotation public bool StaticRotation Field Value bool StaticScale public bool StaticScale Field Value bool Text public string Text Field Value string"
  },
  "api/DrawBug.TextMeshRenderer.html": {
    "href": "api/DrawBug.TextMeshRenderer.html",
    "title": "Class TextMeshRenderer | DrawBug",
    "keywords": "Class TextMeshRenderer Namespace DrawBug Assembly DrawBug.dll public class TextMeshRenderer Inheritance object TextMeshRenderer Constructors TextMeshRenderer(TextMeshPro) public TextMeshRenderer(TextMeshPro textMeshPro) Parameters textMeshPro TextMeshPro Properties CacheCapacity Size of the underlying text mesh cache (in number of entries). If a given text mesh is not in cache a new one must be created by the text mesh generator backend. This is an expensive operation and should be avoided. Every time you ask TextDrawer to draw a new text/font-size combination, it needs to be generated and put back in the cache. Once the cache capacity overflows, the oldest item is discarded to make room for the new one. public int CacheCapacity { get; set; } Property Value int Methods RenderElements() public void RenderElements() Submit(string, float, Color?, Matrix4x4, TMP_FontAsset, TextPivot, bool, bool) public void Submit(string text, float fontSize, Color? color, Matrix4x4 matrix4X4, TMP_FontAsset font = null, TextPivot pivot = TextPivot.Center, bool staticRotation = false, bool staticScale = false) Parameters text string fontSize float color Color? matrix4X4 Matrix4x4 font TMP_FontAsset pivot TextPivot staticRotation bool staticScale bool"
  },
  "api/DrawBug.TextPivot.html": {
    "href": "api/DrawBug.TextPivot.html",
    "title": "Enum TextPivot | DrawBug",
    "keywords": "Enum TextPivot Namespace DrawBug Assembly DrawBug.dll public enum TextPivot Fields BottomCenter = 1 BottomLeft = 0 BottomRight = 2 Center = 4 CenterLeft = 3 CenterRight = 5 TopCenter = 7 TopLeft = 6 TopRight = 8"
  },
  "api/DrawBug.TimedTextElement.html": {
    "href": "api/DrawBug.TimedTextElement.html",
    "title": "Class TimedTextElement | DrawBug",
    "keywords": "Class TimedTextElement Namespace DrawBug Assembly DrawBug.dll public class TimedTextElement : TextElement Inheritance object TextElement TimedTextElement Inherited Members TextElement.Text TextElement.FontSize TextElement.Color TextElement.Matrix4X4 TextElement.FontAsset TextElement.Pivot TextElement.StaticRotation TextElement.StaticScale Fields TimeLeft public float TimeLeft Field Value float"
  },
  "api/DrawBug.WireDrawers.ArrowLineWireDrawer.html": {
    "href": "api/DrawBug.WireDrawers.ArrowLineWireDrawer.html",
    "title": "Class ArrowLineWireDrawer | DrawBug",
    "keywords": "Class ArrowLineWireDrawer Namespace DrawBug.WireDrawers Assembly DrawBug.dll public class ArrowLineWireDrawer : WireDrawer Inheritance object WireDrawer ArrowLineWireDrawer Inherited Members WireDrawer.Get<T>() Constructors ArrowLineWireDrawer() public ArrowLineWireDrawer() Methods Draw(ref Vector3[], params object[]) public override int Draw(ref Vector3[] buffer, params object[] args) Parameters buffer Vector3[] args object[] Returns int"
  },
  "api/DrawBug.WireDrawers.ArrowWireDrawer.html": {
    "href": "api/DrawBug.WireDrawers.ArrowWireDrawer.html",
    "title": "Class ArrowWireDrawer | DrawBug",
    "keywords": "Class ArrowWireDrawer Namespace DrawBug.WireDrawers Assembly DrawBug.dll public class ArrowWireDrawer : WireDrawer Inheritance object WireDrawer ArrowWireDrawer Inherited Members WireDrawer.Get<T>() Methods Draw(ref Vector3[], params object[]) public override int Draw(ref Vector3[] buffer, params object[] args) Parameters buffer Vector3[] args object[] Returns int"
  },
  "api/DrawBug.WireDrawers.ArrowWireDrawer3D.html": {
    "href": "api/DrawBug.WireDrawers.ArrowWireDrawer3D.html",
    "title": "Class ArrowWireDrawer3D | DrawBug",
    "keywords": "Class ArrowWireDrawer3D Namespace DrawBug.WireDrawers Assembly DrawBug.dll public class ArrowWireDrawer3D : WireDrawer Inheritance object WireDrawer ArrowWireDrawer3D Inherited Members WireDrawer.Get<T>() Methods Draw(ref Vector3[], params object[]) public override int Draw(ref Vector3[] buffer, params object[] args) Parameters buffer Vector3[] args object[] Returns int"
  },
  "api/DrawBug.WireDrawers.CapsuleWireDrawer.html": {
    "href": "api/DrawBug.WireDrawers.CapsuleWireDrawer.html",
    "title": "Class CapsuleWireDrawer | DrawBug",
    "keywords": "Class CapsuleWireDrawer Namespace DrawBug.WireDrawers Assembly DrawBug.dll public class CapsuleWireDrawer : WireDrawer Inheritance object WireDrawer CapsuleWireDrawer Inherited Members WireDrawer.Get<T>() Constructors CapsuleWireDrawer() public CapsuleWireDrawer() Methods Draw(ref Vector3[], params object[]) public override int Draw(ref Vector3[] buffer, params object[] args) Parameters buffer Vector3[] args object[] Returns int"
  },
  "api/DrawBug.WireDrawers.CircleWireDrawer.html": {
    "href": "api/DrawBug.WireDrawers.CircleWireDrawer.html",
    "title": "Class CircleWireDrawer | DrawBug",
    "keywords": "Class CircleWireDrawer Namespace DrawBug.WireDrawers Assembly DrawBug.dll public class CircleWireDrawer : WireDrawer Inheritance object WireDrawer CircleWireDrawer Inherited Members WireDrawer.Get<T>() Constructors CircleWireDrawer() public CircleWireDrawer() Methods Draw(ref Vector3[], params object[]) public override int Draw(ref Vector3[] buffer, params object[] args) Parameters buffer Vector3[] args object[] Returns int"
  },
  "api/DrawBug.WireDrawers.CubeWireDrawer.html": {
    "href": "api/DrawBug.WireDrawers.CubeWireDrawer.html",
    "title": "Class CubeWireDrawer | DrawBug",
    "keywords": "Class CubeWireDrawer Namespace DrawBug.WireDrawers Assembly DrawBug.dll public class CubeWireDrawer : WireDrawer Inheritance object WireDrawer CubeWireDrawer Inherited Members WireDrawer.Get<T>() Constructors CubeWireDrawer() public CubeWireDrawer() Methods Draw(ref Vector3[], params object[]) public override int Draw(ref Vector3[] buffer, params object[] args) Parameters buffer Vector3[] args object[] Returns int"
  },
  "api/DrawBug.WireDrawers.LineWireDrawer.html": {
    "href": "api/DrawBug.WireDrawers.LineWireDrawer.html",
    "title": "Class LineWireDrawer | DrawBug",
    "keywords": "Class LineWireDrawer Namespace DrawBug.WireDrawers Assembly DrawBug.dll public class LineWireDrawer : WireDrawer Inheritance object WireDrawer LineWireDrawer Inherited Members WireDrawer.Get<T>() Constructors LineWireDrawer() public LineWireDrawer() Methods Draw(ref Vector3[], params object[]) public override int Draw(ref Vector3[] buffer, params object[] args) Parameters buffer Vector3[] args object[] Returns int"
  },
  "api/DrawBug.WireDrawers.SquareWireDrawer.html": {
    "href": "api/DrawBug.WireDrawers.SquareWireDrawer.html",
    "title": "Class SquareWireDrawer | DrawBug",
    "keywords": "Class SquareWireDrawer Namespace DrawBug.WireDrawers Assembly DrawBug.dll public class SquareWireDrawer : WireDrawer Inheritance object WireDrawer SquareWireDrawer Inherited Members WireDrawer.Get<T>() Constructors SquareWireDrawer() public SquareWireDrawer() Methods Draw(ref Vector3[], params object[]) public override int Draw(ref Vector3[] buffer, params object[] args) Parameters buffer Vector3[] args object[] Returns int"
  },
  "api/DrawBug.WireDrawers.WireDrawer.html": {
    "href": "api/DrawBug.WireDrawers.WireDrawer.html",
    "title": "Class WireDrawer | DrawBug",
    "keywords": "Class WireDrawer Namespace DrawBug.WireDrawers Assembly DrawBug.dll public abstract class WireDrawer Inheritance object WireDrawer Derived ArrowLineWireDrawer ArrowWireDrawer ArrowWireDrawer3D CapsuleWireDrawer CircleWireDrawer CubeWireDrawer LineWireDrawer SquareWireDrawer Constructors WireDrawer() protected WireDrawer() Methods Draw(ref Vector3[], params object[]) public abstract int Draw(ref Vector3[] buffer, params object[] args) Parameters buffer Vector3[] args object[] Returns int Get<T>() public static WireDrawer Get<T>() where T : class Returns WireDrawer Type Parameters T"
  },
  "api/DrawBug.WireDrawers.html": {
    "href": "api/DrawBug.WireDrawers.html",
    "title": "Namespace DrawBug.WireDrawers | DrawBug",
    "keywords": "Namespace DrawBug.WireDrawers Classes ArrowLineWireDrawer ArrowWireDrawer ArrowWireDrawer3D CapsuleWireDrawer CircleWireDrawer CubeWireDrawer LineWireDrawer SquareWireDrawer WireDrawer"
  },
  "api/DrawBug.WireRenderer.html": {
    "href": "api/DrawBug.WireRenderer.html",
    "title": "Class WireRenderer | DrawBug",
    "keywords": "Class WireRenderer Namespace DrawBug Assembly DrawBug.dll public class WireRenderer Inheritance object WireRenderer Constructors WireRenderer() public WireRenderer() Properties Material public Material Material { get; set; } Property Value Material MaxBufferSize public int MaxBufferSize { get; set; } Property Value int NoZTestMaterial public Material NoZTestMaterial { get; set; } Property Value Material NoZTestMaxBufferSize public int NoZTestMaxBufferSize { get; set; } Property Value int NoZTestUsed public bool NoZTestUsed { get; } Property Value bool Methods RenderElements() public void RenderElements() Submit(Vector3[], Color?, bool) public void Submit(Vector3[] points, Color? color, bool overrideMode = false) Parameters points Vector3[] color Color? overrideMode bool"
  },
  "api/DrawBug.html": {
    "href": "api/DrawBug.html",
    "title": "Namespace DrawBug | DrawBug",
    "keywords": "Namespace DrawBug Classes DrawPolygon DrawText DrawWire Drawbug LRUDictionary<TK, TV> PolygonRenderer TextElement TextMeshRenderer TimedTextElement WireRenderer Structs DrawingStyle Enums DrawMethod TextPivot"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER | DrawBug",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation!"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | DrawBug",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "manual/intro.html": {
    "href": "manual/intro.html",
    "title": "Add your introductions here! | DrawBug",
    "keywords": "Add your introductions here!"
  }
}